
mors_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f44  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080030d8  080030d8  000130d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003284  08003284  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003284  08003284  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003284  08003284  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003284  08003284  00013284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003288  08003288  00013288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800328c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000124  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000130  20000130  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008d1f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000014b5  00000000  00000000  00028d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000670  00000000  00000000  0002a258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000004ef  00000000  00000000  0002a8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f7a3  00000000  00000000  0002adb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000098aa  00000000  00000000  0004a55a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bfb81  00000000  00000000  00053e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000192c  00000000  00000000  00113988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001152b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080030c0 	.word	0x080030c0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080030c0 	.word	0x080030c0

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <mors_to_char>:
  {".--.", 'P'}, {"--.-", 'Q'}, {".-.", 'R'},  {"...", 'S'}, {"-", 'T'},
  {"..-", 'U'},  {"...-", 'V'}, {".--", 'W'},  {"-..-", 'X'},{"-.--", 'Y'},
  {"--..", 'Z'}, {NULL, 0}
};

char mors_to_char(const char* mors_code) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  for (int i = 0; mors_table[i].code != NULL; i++) {
 8000200:	2300      	movs	r3, #0
 8000202:	60fb      	str	r3, [r7, #12]
 8000204:	e013      	b.n	800022e <mors_to_char+0x36>
    if (strcmp(mors_code, mors_table[i].code) == 0)
 8000206:	4a0f      	ldr	r2, [pc, #60]	; (8000244 <mors_to_char+0x4c>)
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800020e:	4619      	mov	r1, r3
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f7ff ffdf 	bl	80001d4 <strcmp>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d105      	bne.n	8000228 <mors_to_char+0x30>
      return mors_table[i].letter;
 800021c:	4a09      	ldr	r2, [pc, #36]	; (8000244 <mors_to_char+0x4c>)
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	00db      	lsls	r3, r3, #3
 8000222:	4413      	add	r3, r2
 8000224:	791b      	ldrb	r3, [r3, #4]
 8000226:	e009      	b.n	800023c <mors_to_char+0x44>
  for (int i = 0; mors_table[i].code != NULL; i++) {
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	3301      	adds	r3, #1
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	4a05      	ldr	r2, [pc, #20]	; (8000244 <mors_to_char+0x4c>)
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1e5      	bne.n	8000206 <mors_to_char+0xe>
  }
  return '?';
 800023a:	233f      	movs	r3, #63	; 0x3f
}
 800023c:	4618      	mov	r0, r3
 800023e:	3710      	adds	r7, #16
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	08003174 	.word	0x08003174

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
  HAL_Init();
 800024e:	f000 faab 	bl	80007a8 <HAL_Init>
  SystemClock_Config();
 8000252:	f000 f8cd 	bl	80003f0 <SystemClock_Config>
  MX_GPIO_Init();
 8000256:	f000 f959 	bl	800050c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800025a:	f000 f927 	bl	80004ac <MX_USART2_UART_Init>

  // LED ilk başta kapalı
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800025e:	2200      	movs	r2, #0
 8000260:	2101      	movs	r1, #1
 8000262:	4858      	ldr	r0, [pc, #352]	; (80003c4 <main+0x17c>)
 8000264:	f000 fd8e 	bl	8000d84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	2110      	movs	r1, #16
 800026c:	4855      	ldr	r0, [pc, #340]	; (80003c4 <main+0x17c>)
 800026e:	f000 fd89 	bl	8000d84 <HAL_GPIO_WritePin>
  while (1) {
    // Butona basıldı mı?
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8000272:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000276:	4854      	ldr	r0, [pc, #336]	; (80003c8 <main+0x180>)
 8000278:	f000 fd6c 	bl	8000d54 <HAL_GPIO_ReadPin>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d147      	bne.n	8000312 <main+0xca>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	2110      	movs	r1, #16
 8000286:	484f      	ldr	r0, [pc, #316]	; (80003c4 <main+0x17c>)
 8000288:	f000 fd7c 	bl	8000d84 <HAL_GPIO_WritePin>
      // Başlangıç zamanı
      start_time = HAL_GetTick();
 800028c:	f000 fae6 	bl	800085c <HAL_GetTick>
 8000290:	4603      	mov	r3, r0
 8000292:	4a4e      	ldr	r2, [pc, #312]	; (80003cc <main+0x184>)
 8000294:	6013      	str	r3, [r2, #0]

      // LED'i YAK (PB0)
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000296:	2201      	movs	r2, #1
 8000298:	2101      	movs	r1, #1
 800029a:	484a      	ldr	r0, [pc, #296]	; (80003c4 <main+0x17c>)
 800029c:	f000 fd72 	bl	8000d84 <HAL_GPIO_WritePin>


      // Buton bırakılana kadar bekle
      while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET);
 80002a0:	bf00      	nop
 80002a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002a6:	4848      	ldr	r0, [pc, #288]	; (80003c8 <main+0x180>)
 80002a8:	f000 fd54 	bl	8000d54 <HAL_GPIO_ReadPin>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d0f7      	beq.n	80002a2 <main+0x5a>

      // Süreyi hesapla
      duration = HAL_GetTick() - start_time;
 80002b2:	f000 fad3 	bl	800085c <HAL_GetTick>
 80002b6:	4602      	mov	r2, r0
 80002b8:	4b44      	ldr	r3, [pc, #272]	; (80003cc <main+0x184>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	1ad3      	subs	r3, r2, r3
 80002be:	4a44      	ldr	r2, [pc, #272]	; (80003d0 <main+0x188>)
 80002c0:	6013      	str	r3, [r2, #0]
      last_press_time = HAL_GetTick();
 80002c2:	f000 facb 	bl	800085c <HAL_GetTick>
 80002c6:	4603      	mov	r3, r0
 80002c8:	4a42      	ldr	r2, [pc, #264]	; (80003d4 <main+0x18c>)
 80002ca:	6013      	str	r3, [r2, #0]

      // LED'i SÖNDÜR
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80002cc:	2200      	movs	r2, #0
 80002ce:	2101      	movs	r1, #1
 80002d0:	483c      	ldr	r0, [pc, #240]	; (80003c4 <main+0x17c>)
 80002d2:	f000 fd57 	bl	8000d84 <HAL_GPIO_WritePin>

      // Mors işareti oluştur
      if (duration < 300)
 80002d6:	4b3e      	ldr	r3, [pc, #248]	; (80003d0 <main+0x188>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80002de:	d20c      	bcs.n	80002fa <main+0xb2>
        strcat(mors_buffer, ".");
 80002e0:	483d      	ldr	r0, [pc, #244]	; (80003d8 <main+0x190>)
 80002e2:	f7ff ff81 	bl	80001e8 <strlen>
 80002e6:	4603      	mov	r3, r0
 80002e8:	461a      	mov	r2, r3
 80002ea:	4b3b      	ldr	r3, [pc, #236]	; (80003d8 <main+0x190>)
 80002ec:	4413      	add	r3, r2
 80002ee:	493b      	ldr	r1, [pc, #236]	; (80003dc <main+0x194>)
 80002f0:	461a      	mov	r2, r3
 80002f2:	460b      	mov	r3, r1
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	8013      	strh	r3, [r2, #0]
 80002f8:	e00b      	b.n	8000312 <main+0xca>
      else
        strcat(mors_buffer, "-");
 80002fa:	4837      	ldr	r0, [pc, #220]	; (80003d8 <main+0x190>)
 80002fc:	f7ff ff74 	bl	80001e8 <strlen>
 8000300:	4603      	mov	r3, r0
 8000302:	461a      	mov	r2, r3
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <main+0x190>)
 8000306:	4413      	add	r3, r2
 8000308:	4935      	ldr	r1, [pc, #212]	; (80003e0 <main+0x198>)
 800030a:	461a      	mov	r2, r3
 800030c:	460b      	mov	r3, r1
 800030e:	881b      	ldrh	r3, [r3, #0]
 8000310:	8013      	strh	r3, [r2, #0]
    }

    // Harf kontrolü
    if ((HAL_GetTick() - last_press_time > 1000) && strlen(mors_buffer) > 0) {
 8000312:	f000 faa3 	bl	800085c <HAL_GetTick>
 8000316:	4602      	mov	r2, r0
 8000318:	4b2e      	ldr	r3, [pc, #184]	; (80003d4 <main+0x18c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	1ad3      	subs	r3, r2, r3
 800031e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000322:	d91c      	bls.n	800035e <main+0x116>
 8000324:	4b2c      	ldr	r3, [pc, #176]	; (80003d8 <main+0x190>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d018      	beq.n	800035e <main+0x116>
      char harf = mors_to_char(mors_buffer);
 800032c:	482a      	ldr	r0, [pc, #168]	; (80003d8 <main+0x190>)
 800032e:	f7ff ff63 	bl	80001f8 <mors_to_char>
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
      int len = strlen(kelime);
 8000336:	482b      	ldr	r0, [pc, #172]	; (80003e4 <main+0x19c>)
 8000338:	f7ff ff56 	bl	80001e8 <strlen>
 800033c:	4603      	mov	r3, r0
 800033e:	603b      	str	r3, [r7, #0]
      kelime[len] = harf;
 8000340:	4a28      	ldr	r2, [pc, #160]	; (80003e4 <main+0x19c>)
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	4413      	add	r3, r2
 8000346:	79fa      	ldrb	r2, [r7, #7]
 8000348:	701a      	strb	r2, [r3, #0]
      kelime[len + 1] = '\0';
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	3301      	adds	r3, #1
 800034e:	4a25      	ldr	r2, [pc, #148]	; (80003e4 <main+0x19c>)
 8000350:	2100      	movs	r1, #0
 8000352:	54d1      	strb	r1, [r2, r3]
      memset(mors_buffer, 0, sizeof(mors_buffer));
 8000354:	220a      	movs	r2, #10
 8000356:	2100      	movs	r1, #0
 8000358:	481f      	ldr	r0, [pc, #124]	; (80003d8 <main+0x190>)
 800035a:	f002 fe84 	bl	8003066 <memset>
    }

    // Kelime kontrolü
    if ((HAL_GetTick() - last_press_time > 3000) && strlen(kelime) > 0) {
 800035e:	f000 fa7d 	bl	800085c <HAL_GetTick>
 8000362:	4602      	mov	r2, r0
 8000364:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <main+0x18c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	1ad3      	subs	r3, r2, r3
 800036a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800036e:	4293      	cmp	r3, r2
 8000370:	f67f af7f 	bls.w	8000272 <main+0x2a>
 8000374:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <main+0x19c>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	f43f af7a 	beq.w	8000272 <main+0x2a>
      strcat(kelime, "\r\n");
 800037e:	4819      	ldr	r0, [pc, #100]	; (80003e4 <main+0x19c>)
 8000380:	f7ff ff32 	bl	80001e8 <strlen>
 8000384:	4603      	mov	r3, r0
 8000386:	461a      	mov	r2, r3
 8000388:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <main+0x19c>)
 800038a:	4413      	add	r3, r2
 800038c:	4a16      	ldr	r2, [pc, #88]	; (80003e8 <main+0x1a0>)
 800038e:	8811      	ldrh	r1, [r2, #0]
 8000390:	7892      	ldrb	r2, [r2, #2]
 8000392:	8019      	strh	r1, [r3, #0]
 8000394:	709a      	strb	r2, [r3, #2]
      HAL_UART_Transmit(&huart2, (uint8_t*)kelime, strlen(kelime), HAL_MAX_DELAY);
 8000396:	4813      	ldr	r0, [pc, #76]	; (80003e4 <main+0x19c>)
 8000398:	f7ff ff26 	bl	80001e8 <strlen>
 800039c:	4603      	mov	r3, r0
 800039e:	b29a      	uxth	r2, r3
 80003a0:	f04f 33ff 	mov.w	r3, #4294967295
 80003a4:	490f      	ldr	r1, [pc, #60]	; (80003e4 <main+0x19c>)
 80003a6:	4811      	ldr	r0, [pc, #68]	; (80003ec <main+0x1a4>)
 80003a8:	f002 f9e4 	bl	8002774 <HAL_UART_Transmit>
      memset(kelime, 0, sizeof(kelime));
 80003ac:	2264      	movs	r2, #100	; 0x64
 80003ae:	2100      	movs	r1, #0
 80003b0:	480c      	ldr	r0, [pc, #48]	; (80003e4 <main+0x19c>)
 80003b2:	f002 fe58 	bl	8003066 <memset>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2110      	movs	r1, #16
 80003ba:	4802      	ldr	r0, [pc, #8]	; (80003c4 <main+0x17c>)
 80003bc:	f000 fce2 	bl	8000d84 <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80003c0:	e757      	b.n	8000272 <main+0x2a>
 80003c2:	bf00      	nop
 80003c4:	48000400 	.word	0x48000400
 80003c8:	48000800 	.word	0x48000800
 80003cc:	20000120 	.word	0x20000120
 80003d0:	20000124 	.word	0x20000124
 80003d4:	20000128 	.word	0x20000128
 80003d8:	200000b0 	.word	0x200000b0
 80003dc:	080030f0 	.word	0x080030f0
 80003e0:	08003144 	.word	0x08003144
 80003e4:	200000bc 	.word	0x200000bc
 80003e8:	08003170 	.word	0x08003170
 80003ec:	20000028 	.word	0x20000028

080003f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b0a6      	sub	sp, #152	; 0x98
 80003f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003fa:	2228      	movs	r2, #40	; 0x28
 80003fc:	2100      	movs	r1, #0
 80003fe:	4618      	mov	r0, r3
 8000400:	f002 fe31 	bl	8003066 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000404:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]
 8000412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2258      	movs	r2, #88	; 0x58
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f002 fe23 	bl	8003066 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000420:	2302      	movs	r3, #2
 8000422:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000424:	2301      	movs	r3, #1
 8000426:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000428:	2310      	movs	r3, #16
 800042a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042e:	2302      	movs	r3, #2
 8000430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000434:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000438:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800043c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000440:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800044e:	4618      	mov	r0, r3
 8000450:	f000 fcb0 	bl	8000db4 <HAL_RCC_OscConfig>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800045a:	f000 f8d3 	bl	8000604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045e:	230f      	movs	r3, #15
 8000460:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000462:	2302      	movs	r3, #2
 8000464:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000466:	2300      	movs	r3, #0
 8000468:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800046a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800046e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000474:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000478:	2102      	movs	r1, #2
 800047a:	4618      	mov	r0, r3
 800047c:	f001 fcee 	bl	8001e5c <HAL_RCC_ClockConfig>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000486:	f000 f8bd 	bl	8000604 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800048a:	2302      	movs	r3, #2
 800048c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800048e:	2300      	movs	r3, #0
 8000490:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	4618      	mov	r0, r3
 8000496:	f001 ff01 	bl	800229c <HAL_RCCEx_PeriphCLKConfig>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004a0:	f000 f8b0 	bl	8000604 <Error_Handler>
  }
}
 80004a4:	bf00      	nop
 80004a6:	3798      	adds	r7, #152	; 0x98
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <MX_USART2_UART_Init+0x58>)
 80004b2:	4a15      	ldr	r2, [pc, #84]	; (8000508 <MX_USART2_UART_Init+0x5c>)
 80004b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80004b6:	4b13      	ldr	r3, [pc, #76]	; (8000504 <MX_USART2_UART_Init+0x58>)
 80004b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <MX_USART2_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <MX_USART2_UART_Init+0x58>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <MX_USART2_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <MX_USART2_UART_Init+0x58>)
 80004d2:	220c      	movs	r2, #12
 80004d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <MX_USART2_UART_Init+0x58>)
 80004d8:	2200      	movs	r2, #0
 80004da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <MX_USART2_UART_Init+0x58>)
 80004de:	2200      	movs	r2, #0
 80004e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <MX_USART2_UART_Init+0x58>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_USART2_UART_Init+0x58>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_USART2_UART_Init+0x58>)
 80004f0:	f002 f8f2 	bl	80026d8 <HAL_UART_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004fa:	f000 f883 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000028 	.word	0x20000028
 8000508:	40004400 	.word	0x40004400

0800050c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08a      	sub	sp, #40	; 0x28
 8000510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	4b35      	ldr	r3, [pc, #212]	; (80005f8 <MX_GPIO_Init+0xec>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	4a34      	ldr	r2, [pc, #208]	; (80005f8 <MX_GPIO_Init+0xec>)
 8000528:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800052c:	6153      	str	r3, [r2, #20]
 800052e:	4b32      	ldr	r3, [pc, #200]	; (80005f8 <MX_GPIO_Init+0xec>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800053a:	4b2f      	ldr	r3, [pc, #188]	; (80005f8 <MX_GPIO_Init+0xec>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a2e      	ldr	r2, [pc, #184]	; (80005f8 <MX_GPIO_Init+0xec>)
 8000540:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b2c      	ldr	r3, [pc, #176]	; (80005f8 <MX_GPIO_Init+0xec>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <MX_GPIO_Init+0xec>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	4a28      	ldr	r2, [pc, #160]	; (80005f8 <MX_GPIO_Init+0xec>)
 8000558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800055c:	6153      	str	r3, [r2, #20]
 800055e:	4b26      	ldr	r3, [pc, #152]	; (80005f8 <MX_GPIO_Init+0xec>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <MX_GPIO_Init+0xec>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	4a22      	ldr	r2, [pc, #136]	; (80005f8 <MX_GPIO_Init+0xec>)
 8000570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000574:	6153      	str	r3, [r2, #20]
 8000576:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <MX_GPIO_Init+0xec>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2120      	movs	r1, #32
 8000586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058a:	f000 fbfb 	bl	8000d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2111      	movs	r1, #17
 8000592:	481a      	ldr	r0, [pc, #104]	; (80005fc <MX_GPIO_Init+0xf0>)
 8000594:	f000 fbf6 	bl	8000d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800059e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4619      	mov	r1, r3
 80005ae:	4814      	ldr	r0, [pc, #80]	; (8000600 <MX_GPIO_Init+0xf4>)
 80005b0:	f000 fa46 	bl	8000a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005b4:	2320      	movs	r3, #32
 80005b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c0:	2300      	movs	r3, #0
 80005c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4619      	mov	r1, r3
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ce:	f000 fa37 	bl	8000a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80005d2:	2311      	movs	r3, #17
 80005d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2300      	movs	r3, #0
 80005e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	4804      	ldr	r0, [pc, #16]	; (80005fc <MX_GPIO_Init+0xf0>)
 80005ea:	f000 fa29 	bl	8000a40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ee:	bf00      	nop
 80005f0:	3728      	adds	r7, #40	; 0x28
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000
 80005fc:	48000400 	.word	0x48000400
 8000600:	48000800 	.word	0x48000800

08000604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
}
 800060a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060c:	e7fe      	b.n	800060c <Error_Handler+0x8>
	...

08000610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <HAL_MspInit+0x44>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <HAL_MspInit+0x44>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6193      	str	r3, [r2, #24]
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <HAL_MspInit+0x44>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <HAL_MspInit+0x44>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	4a08      	ldr	r2, [pc, #32]	; (8000654 <HAL_MspInit+0x44>)
 8000634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000638:	61d3      	str	r3, [r2, #28]
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_MspInit+0x44>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000646:	2007      	movs	r0, #7
 8000648:	f000 f9c6 	bl	80009d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40021000 	.word	0x40021000

08000658 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <HAL_UART_MspInit+0x7c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d128      	bne.n	80006cc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <HAL_UART_MspInit+0x80>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	4a16      	ldr	r2, [pc, #88]	; (80006d8 <HAL_UART_MspInit+0x80>)
 8000680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000684:	61d3      	str	r3, [r2, #28]
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <HAL_UART_MspInit+0x80>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <HAL_UART_MspInit+0x80>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	4a10      	ldr	r2, [pc, #64]	; (80006d8 <HAL_UART_MspInit+0x80>)
 8000698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800069c:	6153      	str	r3, [r2, #20]
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <HAL_UART_MspInit+0x80>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006aa:	230c      	movs	r3, #12
 80006ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006ba:	2307      	movs	r3, #7
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c8:	f000 f9ba 	bl	8000a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006cc:	bf00      	nop
 80006ce:	3728      	adds	r7, #40	; 0x28
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40004400 	.word	0x40004400
 80006d8:	40021000 	.word	0x40021000

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e0:	e7fe      	b.n	80006e0 <NMI_Handler+0x4>

080006e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <HardFault_Handler+0x4>

080006e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <MemManage_Handler+0x4>

080006ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <BusFault_Handler+0x4>

080006f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <UsageFault_Handler+0x4>

080006fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000728:	f000 f884 	bl	8000834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}

08000730 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <SystemInit+0x20>)
 8000736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800073a:	4a05      	ldr	r2, [pc, #20]	; (8000750 <SystemInit+0x20>)
 800073c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800078c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000758:	f7ff ffea 	bl	8000730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <LoopForever+0x6>)
  ldr r1, =_edata
 800075e:	490d      	ldr	r1, [pc, #52]	; (8000794 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <LoopForever+0xe>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000764:	e002      	b.n	800076c <LoopCopyDataInit>

08000766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076a:	3304      	adds	r3, #4

0800076c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800076c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000770:	d3f9      	bcc.n	8000766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000774:	4c0a      	ldr	r4, [pc, #40]	; (80007a0 <LoopForever+0x16>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000778:	e001      	b.n	800077e <LoopFillZerobss>

0800077a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800077c:	3204      	adds	r2, #4

0800077e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000780:	d3fb      	bcc.n	800077a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000782:	f002 fc79 	bl	8003078 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000786:	f7ff fd5f 	bl	8000248 <main>

0800078a <LoopForever>:

LoopForever:
    b LoopForever
 800078a:	e7fe      	b.n	800078a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800078c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000794:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000798:	0800328c 	.word	0x0800328c
  ldr r2, =_sbss
 800079c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007a0:	20000130 	.word	0x20000130

080007a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007a4:	e7fe      	b.n	80007a4 <ADC1_2_IRQHandler>
	...

080007a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <HAL_Init+0x28>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <HAL_Init+0x28>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b8:	2003      	movs	r0, #3
 80007ba:	f000 f90d 	bl	80009d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 f808 	bl	80007d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c4:	f7ff ff24 	bl	8000610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40022000 	.word	0x40022000

080007d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_InitTick+0x54>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_InitTick+0x58>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f917 	bl	8000a26 <HAL_SYSTICK_Config>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e00e      	b.n	8000820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b0f      	cmp	r3, #15
 8000806:	d80a      	bhi.n	800081e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000808:	2200      	movs	r2, #0
 800080a:	6879      	ldr	r1, [r7, #4]
 800080c:	f04f 30ff 	mov.w	r0, #4294967295
 8000810:	f000 f8ed 	bl	80009ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000814:	4a06      	ldr	r2, [pc, #24]	; (8000830 <HAL_InitTick+0x5c>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800081a:	2300      	movs	r3, #0
 800081c:	e000      	b.n	8000820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000000 	.word	0x20000000
 800082c:	20000008 	.word	0x20000008
 8000830:	20000004 	.word	0x20000004

08000834 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_IncTick+0x20>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_IncTick+0x24>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4413      	add	r3, r2
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <HAL_IncTick+0x24>)
 8000846:	6013      	str	r3, [r2, #0]
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	20000008 	.word	0x20000008
 8000858:	2000012c 	.word	0x2000012c

0800085c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <HAL_GetTick+0x14>)
 8000862:	681b      	ldr	r3, [r3, #0]
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	2000012c 	.word	0x2000012c

08000874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800089c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a6:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <__NVIC_SetPriorityGrouping+0x44>)
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	60d3      	str	r3, [r2, #12]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c0:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <__NVIC_GetPriorityGrouping+0x18>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	0a1b      	lsrs	r3, r3, #8
 80008c6:	f003 0307 	and.w	r3, r3, #7
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	6039      	str	r1, [r7, #0]
 80008e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	db0a      	blt.n	8000902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	490c      	ldr	r1, [pc, #48]	; (8000924 <__NVIC_SetPriority+0x4c>)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	0112      	lsls	r2, r2, #4
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	440b      	add	r3, r1
 80008fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000900:	e00a      	b.n	8000918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4908      	ldr	r1, [pc, #32]	; (8000928 <__NVIC_SetPriority+0x50>)
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	f003 030f 	and.w	r3, r3, #15
 800090e:	3b04      	subs	r3, #4
 8000910:	0112      	lsls	r2, r2, #4
 8000912:	b2d2      	uxtb	r2, r2
 8000914:	440b      	add	r3, r1
 8000916:	761a      	strb	r2, [r3, #24]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000e100 	.word	0xe000e100
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092c:	b480      	push	{r7}
 800092e:	b089      	sub	sp, #36	; 0x24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	f1c3 0307 	rsb	r3, r3, #7
 8000946:	2b04      	cmp	r3, #4
 8000948:	bf28      	it	cs
 800094a:	2304      	movcs	r3, #4
 800094c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3304      	adds	r3, #4
 8000952:	2b06      	cmp	r3, #6
 8000954:	d902      	bls.n	800095c <NVIC_EncodePriority+0x30>
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3b03      	subs	r3, #3
 800095a:	e000      	b.n	800095e <NVIC_EncodePriority+0x32>
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	f04f 32ff 	mov.w	r2, #4294967295
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43da      	mvns	r2, r3
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	401a      	ands	r2, r3
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000974:	f04f 31ff 	mov.w	r1, #4294967295
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	fa01 f303 	lsl.w	r3, r1, r3
 800097e:	43d9      	mvns	r1, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	4313      	orrs	r3, r2
         );
}
 8000986:	4618      	mov	r0, r3
 8000988:	3724      	adds	r7, #36	; 0x24
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3b01      	subs	r3, #1
 80009a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a4:	d301      	bcc.n	80009aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a6:	2301      	movs	r3, #1
 80009a8:	e00f      	b.n	80009ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <SysTick_Config+0x40>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b2:	210f      	movs	r1, #15
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	f7ff ff8e 	bl	80008d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <SysTick_Config+0x40>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c2:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <SysTick_Config+0x40>)
 80009c4:	2207      	movs	r2, #7
 80009c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	e000e010 	.word	0xe000e010

080009d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ff47 	bl	8000874 <__NVIC_SetPriorityGrouping>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b086      	sub	sp, #24
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4603      	mov	r3, r0
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
 80009fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a00:	f7ff ff5c 	bl	80008bc <__NVIC_GetPriorityGrouping>
 8000a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	68b9      	ldr	r1, [r7, #8]
 8000a0a:	6978      	ldr	r0, [r7, #20]
 8000a0c:	f7ff ff8e 	bl	800092c <NVIC_EncodePriority>
 8000a10:	4602      	mov	r2, r0
 8000a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff5d 	bl	80008d8 <__NVIC_SetPriority>
}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff ffb0 	bl	8000994 <SysTick_Config>
 8000a34:	4603      	mov	r3, r0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b087      	sub	sp, #28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a4e:	e160      	b.n	8000d12 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	2101      	movs	r1, #1
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	f000 8152 	beq.w	8000d0c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f003 0303 	and.w	r3, r3, #3
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d005      	beq.n	8000a80 <HAL_GPIO_Init+0x40>
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f003 0303 	and.w	r3, r3, #3
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d130      	bne.n	8000ae2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	68da      	ldr	r2, [r3, #12]
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	091b      	lsrs	r3, r3, #4
 8000acc:	f003 0201 	and.w	r2, r3, #1
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f003 0303 	and.w	r3, r3, #3
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	d017      	beq.n	8000b1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	2203      	movs	r2, #3
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43db      	mvns	r3, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4013      	ands	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f003 0303 	and.w	r3, r3, #3
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d123      	bne.n	8000b72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	08da      	lsrs	r2, r3, #3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3208      	adds	r2, #8
 8000b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	220f      	movs	r2, #15
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	691a      	ldr	r2, [r3, #16]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	f003 0307 	and.w	r3, r3, #7
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	08da      	lsrs	r2, r3, #3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3208      	adds	r2, #8
 8000b6c:	6939      	ldr	r1, [r7, #16]
 8000b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f003 0203 	and.w	r2, r3, #3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f000 80ac 	beq.w	8000d0c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb4:	4b5e      	ldr	r3, [pc, #376]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a5d      	ldr	r2, [pc, #372]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b5b      	ldr	r3, [pc, #364]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bcc:	4a59      	ldr	r2, [pc, #356]	; (8000d34 <HAL_GPIO_Init+0x2f4>)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	220f      	movs	r2, #15
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bf6:	d025      	beq.n	8000c44 <HAL_GPIO_Init+0x204>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a4f      	ldr	r2, [pc, #316]	; (8000d38 <HAL_GPIO_Init+0x2f8>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d01f      	beq.n	8000c40 <HAL_GPIO_Init+0x200>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a4e      	ldr	r2, [pc, #312]	; (8000d3c <HAL_GPIO_Init+0x2fc>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d019      	beq.n	8000c3c <HAL_GPIO_Init+0x1fc>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a4d      	ldr	r2, [pc, #308]	; (8000d40 <HAL_GPIO_Init+0x300>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d013      	beq.n	8000c38 <HAL_GPIO_Init+0x1f8>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a4c      	ldr	r2, [pc, #304]	; (8000d44 <HAL_GPIO_Init+0x304>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d00d      	beq.n	8000c34 <HAL_GPIO_Init+0x1f4>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a4b      	ldr	r2, [pc, #300]	; (8000d48 <HAL_GPIO_Init+0x308>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d007      	beq.n	8000c30 <HAL_GPIO_Init+0x1f0>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a4a      	ldr	r2, [pc, #296]	; (8000d4c <HAL_GPIO_Init+0x30c>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d101      	bne.n	8000c2c <HAL_GPIO_Init+0x1ec>
 8000c28:	2306      	movs	r3, #6
 8000c2a:	e00c      	b.n	8000c46 <HAL_GPIO_Init+0x206>
 8000c2c:	2307      	movs	r3, #7
 8000c2e:	e00a      	b.n	8000c46 <HAL_GPIO_Init+0x206>
 8000c30:	2305      	movs	r3, #5
 8000c32:	e008      	b.n	8000c46 <HAL_GPIO_Init+0x206>
 8000c34:	2304      	movs	r3, #4
 8000c36:	e006      	b.n	8000c46 <HAL_GPIO_Init+0x206>
 8000c38:	2303      	movs	r3, #3
 8000c3a:	e004      	b.n	8000c46 <HAL_GPIO_Init+0x206>
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	e002      	b.n	8000c46 <HAL_GPIO_Init+0x206>
 8000c40:	2301      	movs	r3, #1
 8000c42:	e000      	b.n	8000c46 <HAL_GPIO_Init+0x206>
 8000c44:	2300      	movs	r3, #0
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	f002 0203 	and.w	r2, r2, #3
 8000c4c:	0092      	lsls	r2, r2, #2
 8000c4e:	4093      	lsls	r3, r2
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c56:	4937      	ldr	r1, [pc, #220]	; (8000d34 <HAL_GPIO_Init+0x2f4>)
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c64:	4b3a      	ldr	r3, [pc, #232]	; (8000d50 <HAL_GPIO_Init+0x310>)
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d003      	beq.n	8000c88 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c88:	4a31      	ldr	r2, [pc, #196]	; (8000d50 <HAL_GPIO_Init+0x310>)
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c8e:	4b30      	ldr	r3, [pc, #192]	; (8000d50 <HAL_GPIO_Init+0x310>)
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	43db      	mvns	r3, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cb2:	4a27      	ldr	r2, [pc, #156]	; (8000d50 <HAL_GPIO_Init+0x310>)
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cb8:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <HAL_GPIO_Init+0x310>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d003      	beq.n	8000cdc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cdc:	4a1c      	ldr	r2, [pc, #112]	; (8000d50 <HAL_GPIO_Init+0x310>)
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <HAL_GPIO_Init+0x310>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	43db      	mvns	r3, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d06:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <HAL_GPIO_Init+0x310>)
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	fa22 f303 	lsr.w	r3, r2, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f47f ae97 	bne.w	8000a50 <HAL_GPIO_Init+0x10>
  }
}
 8000d22:	bf00      	nop
 8000d24:	bf00      	nop
 8000d26:	371c      	adds	r7, #28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010000 	.word	0x40010000
 8000d38:	48000400 	.word	0x48000400
 8000d3c:	48000800 	.word	0x48000800
 8000d40:	48000c00 	.word	0x48000c00
 8000d44:	48001000 	.word	0x48001000
 8000d48:	48001400 	.word	0x48001400
 8000d4c:	48001800 	.word	0x48001800
 8000d50:	40010400 	.word	0x40010400

08000d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	691a      	ldr	r2, [r3, #16]
 8000d64:	887b      	ldrh	r3, [r7, #2]
 8000d66:	4013      	ands	r3, r2
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d002      	beq.n	8000d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	e001      	b.n	8000d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	807b      	strh	r3, [r7, #2]
 8000d90:	4613      	mov	r3, r2
 8000d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d94:	787b      	ldrb	r3, [r7, #1]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d9a:	887a      	ldrh	r2, [r7, #2]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000da0:	e002      	b.n	8000da8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000da2:	887a      	ldrh	r2, [r7, #2]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dc0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000dc4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	f001 b83a 	b.w	8001e4e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dde:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 816f 	beq.w	80010ce <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000df0:	4bb5      	ldr	r3, [pc, #724]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 030c 	and.w	r3, r3, #12
 8000df8:	2b04      	cmp	r3, #4
 8000dfa:	d00c      	beq.n	8000e16 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dfc:	4bb2      	ldr	r3, [pc, #712]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 030c 	and.w	r3, r3, #12
 8000e04:	2b08      	cmp	r3, #8
 8000e06:	d15c      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x10e>
 8000e08:	4baf      	ldr	r3, [pc, #700]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e14:	d155      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x10e>
 8000e16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e1a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000e22:	fa93 f3a3 	rbit	r3, r3
 8000e26:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e2a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e2e:	fab3 f383 	clz	r3, r3
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	095b      	lsrs	r3, r3, #5
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d102      	bne.n	8000e48 <HAL_RCC_OscConfig+0x94>
 8000e42:	4ba1      	ldr	r3, [pc, #644]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	e015      	b.n	8000e74 <HAL_RCC_OscConfig+0xc0>
 8000e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e4c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e50:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000e54:	fa93 f3a3 	rbit	r3, r3
 8000e58:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000e5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e60:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e64:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000e68:	fa93 f3a3 	rbit	r3, r3
 8000e6c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e70:	4b95      	ldr	r3, [pc, #596]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8000e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e78:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000e7c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000e80:	fa92 f2a2 	rbit	r2, r2
 8000e84:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000e88:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e8c:	fab2 f282 	clz	r2, r2
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	f042 0220 	orr.w	r2, r2, #32
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	f002 021f 	and.w	r2, r2, #31
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f000 8111 	beq.w	80010cc <HAL_RCC_OscConfig+0x318>
 8000eaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000eae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f040 8108 	bne.w	80010cc <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	f000 bfc6 	b.w	8001e4e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ec6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed2:	d106      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x12e>
 8000ed4:	4b7c      	ldr	r3, [pc, #496]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a7b      	ldr	r2, [pc, #492]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8000eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	e036      	b.n	8000f50 <HAL_RCC_OscConfig+0x19c>
 8000ee2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ee6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10c      	bne.n	8000f0c <HAL_RCC_OscConfig+0x158>
 8000ef2:	4b75      	ldr	r3, [pc, #468]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a74      	ldr	r2, [pc, #464]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8000ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	4b72      	ldr	r3, [pc, #456]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a71      	ldr	r2, [pc, #452]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8000f04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	e021      	b.n	8000f50 <HAL_RCC_OscConfig+0x19c>
 8000f0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f1c:	d10c      	bne.n	8000f38 <HAL_RCC_OscConfig+0x184>
 8000f1e:	4b6a      	ldr	r3, [pc, #424]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a69      	ldr	r2, [pc, #420]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8000f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	4b67      	ldr	r3, [pc, #412]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a66      	ldr	r2, [pc, #408]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8000f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	e00b      	b.n	8000f50 <HAL_RCC_OscConfig+0x19c>
 8000f38:	4b63      	ldr	r3, [pc, #396]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a62      	ldr	r2, [pc, #392]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8000f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	4b60      	ldr	r3, [pc, #384]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a5f      	ldr	r2, [pc, #380]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8000f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f4e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f54:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d059      	beq.n	8001014 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f60:	f7ff fc7c 	bl	800085c <HAL_GetTick>
 8000f64:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f68:	e00a      	b.n	8000f80 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f6a:	f7ff fc77 	bl	800085c <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b64      	cmp	r3, #100	; 0x64
 8000f78:	d902      	bls.n	8000f80 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	f000 bf67 	b.w	8001e4e <HAL_RCC_OscConfig+0x109a>
 8000f80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f84:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f88:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000f8c:	fa93 f3a3 	rbit	r3, r3
 8000f90:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000f94:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f98:	fab3 f383 	clz	r3, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d102      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x1fe>
 8000fac:	4b46      	ldr	r3, [pc, #280]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	e015      	b.n	8000fde <HAL_RCC_OscConfig+0x22a>
 8000fb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000fbe:	fa93 f3a3 	rbit	r3, r3
 8000fc2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000fc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fca:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000fce:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000fd2:	fa93 f3a3 	rbit	r3, r3
 8000fd6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000fda:	4b3b      	ldr	r3, [pc, #236]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fe2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000fe6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000fea:	fa92 f2a2 	rbit	r2, r2
 8000fee:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000ff2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ff6:	fab2 f282 	clz	r2, r2
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	f042 0220 	orr.w	r2, r2, #32
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	f002 021f 	and.w	r2, r2, #31
 8001006:	2101      	movs	r1, #1
 8001008:	fa01 f202 	lsl.w	r2, r1, r2
 800100c:	4013      	ands	r3, r2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0ab      	beq.n	8000f6a <HAL_RCC_OscConfig+0x1b6>
 8001012:	e05c      	b.n	80010ce <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001014:	f7ff fc22 	bl	800085c <HAL_GetTick>
 8001018:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101c:	e00a      	b.n	8001034 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800101e:	f7ff fc1d 	bl	800085c <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b64      	cmp	r3, #100	; 0x64
 800102c:	d902      	bls.n	8001034 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	f000 bf0d 	b.w	8001e4e <HAL_RCC_OscConfig+0x109a>
 8001034:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001038:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001040:	fa93 f3a3 	rbit	r3, r3
 8001044:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001048:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104c:	fab3 f383 	clz	r3, r3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	095b      	lsrs	r3, r3, #5
 8001054:	b2db      	uxtb	r3, r3
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b01      	cmp	r3, #1
 800105e:	d102      	bne.n	8001066 <HAL_RCC_OscConfig+0x2b2>
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	e015      	b.n	8001092 <HAL_RCC_OscConfig+0x2de>
 8001066:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800106a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001072:	fa93 f3a3 	rbit	r3, r3
 8001076:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800107a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800107e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001082:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001086:	fa93 f3a3 	rbit	r3, r3
 800108a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <HAL_RCC_OscConfig+0x314>)
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001096:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800109a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800109e:	fa92 f2a2 	rbit	r2, r2
 80010a2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80010a6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80010aa:	fab2 f282 	clz	r2, r2
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	f042 0220 	orr.w	r2, r2, #32
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	f002 021f 	and.w	r2, r2, #31
 80010ba:	2101      	movs	r1, #1
 80010bc:	fa01 f202 	lsl.w	r2, r1, r2
 80010c0:	4013      	ands	r3, r2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1ab      	bne.n	800101e <HAL_RCC_OscConfig+0x26a>
 80010c6:	e002      	b.n	80010ce <HAL_RCC_OscConfig+0x31a>
 80010c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 817f 	beq.w	80013e2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010e4:	4ba7      	ldr	r3, [pc, #668]	; (8001384 <HAL_RCC_OscConfig+0x5d0>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 030c 	and.w	r3, r3, #12
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00c      	beq.n	800110a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010f0:	4ba4      	ldr	r3, [pc, #656]	; (8001384 <HAL_RCC_OscConfig+0x5d0>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 030c 	and.w	r3, r3, #12
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	d173      	bne.n	80011e4 <HAL_RCC_OscConfig+0x430>
 80010fc:	4ba1      	ldr	r3, [pc, #644]	; (8001384 <HAL_RCC_OscConfig+0x5d0>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001108:	d16c      	bne.n	80011e4 <HAL_RCC_OscConfig+0x430>
 800110a:	2302      	movs	r3, #2
 800110c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001110:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001114:	fa93 f3a3 	rbit	r3, r3
 8001118:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800111c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001120:	fab3 f383 	clz	r3, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	b2db      	uxtb	r3, r3
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b01      	cmp	r3, #1
 8001132:	d102      	bne.n	800113a <HAL_RCC_OscConfig+0x386>
 8001134:	4b93      	ldr	r3, [pc, #588]	; (8001384 <HAL_RCC_OscConfig+0x5d0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	e013      	b.n	8001162 <HAL_RCC_OscConfig+0x3ae>
 800113a:	2302      	movs	r3, #2
 800113c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001140:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001144:	fa93 f3a3 	rbit	r3, r3
 8001148:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800114c:	2302      	movs	r3, #2
 800114e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001152:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001156:	fa93 f3a3 	rbit	r3, r3
 800115a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800115e:	4b89      	ldr	r3, [pc, #548]	; (8001384 <HAL_RCC_OscConfig+0x5d0>)
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	2202      	movs	r2, #2
 8001164:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001168:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800116c:	fa92 f2a2 	rbit	r2, r2
 8001170:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001174:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001178:	fab2 f282 	clz	r2, r2
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	f042 0220 	orr.w	r2, r2, #32
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	f002 021f 	and.w	r2, r2, #31
 8001188:	2101      	movs	r1, #1
 800118a:	fa01 f202 	lsl.w	r2, r1, r2
 800118e:	4013      	ands	r3, r2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00a      	beq.n	80011aa <HAL_RCC_OscConfig+0x3f6>
 8001194:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001198:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d002      	beq.n	80011aa <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	f000 be52 	b.w	8001e4e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011aa:	4b76      	ldr	r3, [pc, #472]	; (8001384 <HAL_RCC_OscConfig+0x5d0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	21f8      	movs	r1, #248	; 0xf8
 80011c0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80011c8:	fa91 f1a1 	rbit	r1, r1
 80011cc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80011d0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80011d4:	fab1 f181 	clz	r1, r1
 80011d8:	b2c9      	uxtb	r1, r1
 80011da:	408b      	lsls	r3, r1
 80011dc:	4969      	ldr	r1, [pc, #420]	; (8001384 <HAL_RCC_OscConfig+0x5d0>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e2:	e0fe      	b.n	80013e2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 8088 	beq.w	8001306 <HAL_RCC_OscConfig+0x552>
 80011f6:	2301      	movs	r3, #1
 80011f8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001208:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800120c:	fab3 f383 	clz	r3, r3
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001216:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	461a      	mov	r2, r3
 800121e:	2301      	movs	r3, #1
 8001220:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001222:	f7ff fb1b 	bl	800085c <HAL_GetTick>
 8001226:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122a:	e00a      	b.n	8001242 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800122c:	f7ff fb16 	bl	800085c <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d902      	bls.n	8001242 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	f000 be06 	b.w	8001e4e <HAL_RCC_OscConfig+0x109a>
 8001242:	2302      	movs	r3, #2
 8001244:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001248:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800124c:	fa93 f3a3 	rbit	r3, r3
 8001250:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001254:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001258:	fab3 f383 	clz	r3, r3
 800125c:	b2db      	uxtb	r3, r3
 800125e:	095b      	lsrs	r3, r3, #5
 8001260:	b2db      	uxtb	r3, r3
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b01      	cmp	r3, #1
 800126a:	d102      	bne.n	8001272 <HAL_RCC_OscConfig+0x4be>
 800126c:	4b45      	ldr	r3, [pc, #276]	; (8001384 <HAL_RCC_OscConfig+0x5d0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	e013      	b.n	800129a <HAL_RCC_OscConfig+0x4e6>
 8001272:	2302      	movs	r3, #2
 8001274:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001278:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800127c:	fa93 f3a3 	rbit	r3, r3
 8001280:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001284:	2302      	movs	r3, #2
 8001286:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800128a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800128e:	fa93 f3a3 	rbit	r3, r3
 8001292:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001296:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <HAL_RCC_OscConfig+0x5d0>)
 8001298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129a:	2202      	movs	r2, #2
 800129c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80012a0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80012a4:	fa92 f2a2 	rbit	r2, r2
 80012a8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80012ac:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80012b0:	fab2 f282 	clz	r2, r2
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	f042 0220 	orr.w	r2, r2, #32
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	f002 021f 	and.w	r2, r2, #31
 80012c0:	2101      	movs	r1, #1
 80012c2:	fa01 f202 	lsl.w	r2, r1, r2
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0af      	beq.n	800122c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012cc:	4b2d      	ldr	r3, [pc, #180]	; (8001384 <HAL_RCC_OscConfig+0x5d0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	21f8      	movs	r1, #248	; 0xf8
 80012e2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80012ea:	fa91 f1a1 	rbit	r1, r1
 80012ee:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80012f2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012f6:	fab1 f181 	clz	r1, r1
 80012fa:	b2c9      	uxtb	r1, r1
 80012fc:	408b      	lsls	r3, r1
 80012fe:	4921      	ldr	r1, [pc, #132]	; (8001384 <HAL_RCC_OscConfig+0x5d0>)
 8001300:	4313      	orrs	r3, r2
 8001302:	600b      	str	r3, [r1, #0]
 8001304:	e06d      	b.n	80013e2 <HAL_RCC_OscConfig+0x62e>
 8001306:	2301      	movs	r3, #1
 8001308:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001310:	fa93 f3a3 	rbit	r3, r3
 8001314:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001318:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800131c:	fab3 f383 	clz	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001326:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	461a      	mov	r2, r3
 800132e:	2300      	movs	r3, #0
 8001330:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001332:	f7ff fa93 	bl	800085c <HAL_GetTick>
 8001336:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133a:	e00a      	b.n	8001352 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800133c:	f7ff fa8e 	bl	800085c <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d902      	bls.n	8001352 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	f000 bd7e 	b.w	8001e4e <HAL_RCC_OscConfig+0x109a>
 8001352:	2302      	movs	r3, #2
 8001354:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001358:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001364:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001368:	fab3 f383 	clz	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b01      	cmp	r3, #1
 800137a:	d105      	bne.n	8001388 <HAL_RCC_OscConfig+0x5d4>
 800137c:	4b01      	ldr	r3, [pc, #4]	; (8001384 <HAL_RCC_OscConfig+0x5d0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	e016      	b.n	80013b0 <HAL_RCC_OscConfig+0x5fc>
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000
 8001388:	2302      	movs	r3, #2
 800138a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001392:	fa93 f3a3 	rbit	r3, r3
 8001396:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800139a:	2302      	movs	r3, #2
 800139c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80013a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80013a4:	fa93 f3a3 	rbit	r3, r3
 80013a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80013ac:	4bbf      	ldr	r3, [pc, #764]	; (80016ac <HAL_RCC_OscConfig+0x8f8>)
 80013ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b0:	2202      	movs	r2, #2
 80013b2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80013b6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80013ba:	fa92 f2a2 	rbit	r2, r2
 80013be:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80013c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013c6:	fab2 f282 	clz	r2, r2
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	f042 0220 	orr.w	r2, r2, #32
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	f002 021f 	and.w	r2, r2, #31
 80013d6:	2101      	movs	r1, #1
 80013d8:	fa01 f202 	lsl.w	r2, r1, r2
 80013dc:	4013      	ands	r3, r2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1ac      	bne.n	800133c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 8113 	beq.w	800161e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d07c      	beq.n	8001502 <HAL_RCC_OscConfig+0x74e>
 8001408:	2301      	movs	r3, #1
 800140a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001412:	fa93 f3a3 	rbit	r3, r3
 8001416:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800141a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141e:	fab3 f383 	clz	r3, r3
 8001422:	b2db      	uxtb	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	4ba2      	ldr	r3, [pc, #648]	; (80016b0 <HAL_RCC_OscConfig+0x8fc>)
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	461a      	mov	r2, r3
 800142e:	2301      	movs	r3, #1
 8001430:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001432:	f7ff fa13 	bl	800085c <HAL_GetTick>
 8001436:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143a:	e00a      	b.n	8001452 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800143c:	f7ff fa0e 	bl	800085c <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d902      	bls.n	8001452 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	f000 bcfe 	b.w	8001e4e <HAL_RCC_OscConfig+0x109a>
 8001452:	2302      	movs	r3, #2
 8001454:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800145c:	fa93 f2a3 	rbit	r2, r3
 8001460:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001464:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800146e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001472:	2202      	movs	r2, #2
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800147a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	fa93 f2a3 	rbit	r2, r3
 8001484:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001492:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001496:	2202      	movs	r2, #2
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800149e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	fa93 f2a3 	rbit	r2, r3
 80014a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80014b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b2:	4b7e      	ldr	r3, [pc, #504]	; (80016ac <HAL_RCC_OscConfig+0x8f8>)
 80014b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014be:	2102      	movs	r1, #2
 80014c0:	6019      	str	r1, [r3, #0]
 80014c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	fa93 f1a3 	rbit	r1, r3
 80014d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014d8:	6019      	str	r1, [r3, #0]
  return result;
 80014da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014de:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f003 031f 	and.w	r3, r3, #31
 80014f4:	2101      	movs	r1, #1
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	4013      	ands	r3, r2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d09d      	beq.n	800143c <HAL_RCC_OscConfig+0x688>
 8001500:	e08d      	b.n	800161e <HAL_RCC_OscConfig+0x86a>
 8001502:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001506:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001512:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	fa93 f2a3 	rbit	r2, r3
 800151c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001520:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001524:	601a      	str	r2, [r3, #0]
  return result;
 8001526:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800152a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800152e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001530:	fab3 f383 	clz	r3, r3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	461a      	mov	r2, r3
 8001538:	4b5d      	ldr	r3, [pc, #372]	; (80016b0 <HAL_RCC_OscConfig+0x8fc>)
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	461a      	mov	r2, r3
 8001540:	2300      	movs	r3, #0
 8001542:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001544:	f7ff f98a 	bl	800085c <HAL_GetTick>
 8001548:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800154c:	e00a      	b.n	8001564 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800154e:	f7ff f985 	bl	800085c <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d902      	bls.n	8001564 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	f000 bc75 	b.w	8001e4e <HAL_RCC_OscConfig+0x109a>
 8001564:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001568:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800156c:	2202      	movs	r2, #2
 800156e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001570:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001574:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	fa93 f2a3 	rbit	r2, r3
 800157e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001582:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800158c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001590:	2202      	movs	r2, #2
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001598:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	fa93 f2a3 	rbit	r2, r3
 80015a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015b4:	2202      	movs	r2, #2
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	fa93 f2a3 	rbit	r2, r3
 80015c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d0:	4b36      	ldr	r3, [pc, #216]	; (80016ac <HAL_RCC_OscConfig+0x8f8>)
 80015d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015dc:	2102      	movs	r1, #2
 80015de:	6019      	str	r1, [r3, #0]
 80015e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	fa93 f1a3 	rbit	r1, r3
 80015ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80015f6:	6019      	str	r1, [r3, #0]
  return result;
 80015f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	fab3 f383 	clz	r3, r3
 8001606:	b2db      	uxtb	r3, r3
 8001608:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800160c:	b2db      	uxtb	r3, r3
 800160e:	f003 031f 	and.w	r3, r3, #31
 8001612:	2101      	movs	r1, #1
 8001614:	fa01 f303 	lsl.w	r3, r1, r3
 8001618:	4013      	ands	r3, r2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d197      	bne.n	800154e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001622:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 81a5 	beq.w	800197e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001634:	2300      	movs	r3, #0
 8001636:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HAL_RCC_OscConfig+0x8f8>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d116      	bne.n	8001674 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_RCC_OscConfig+0x8f8>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	4a18      	ldr	r2, [pc, #96]	; (80016ac <HAL_RCC_OscConfig+0x8f8>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001650:	61d3      	str	r3, [r2, #28]
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <HAL_RCC_OscConfig+0x8f8>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800165a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800165e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001668:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800166c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800166e:	2301      	movs	r3, #1
 8001670:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_RCC_OscConfig+0x900>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167c:	2b00      	cmp	r3, #0
 800167e:	d121      	bne.n	80016c4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <HAL_RCC_OscConfig+0x900>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <HAL_RCC_OscConfig+0x900>)
 8001686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800168c:	f7ff f8e6 	bl	800085c <HAL_GetTick>
 8001690:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001694:	e010      	b.n	80016b8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001696:	f7ff f8e1 	bl	800085c <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d908      	bls.n	80016b8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e3d1      	b.n	8001e4e <HAL_RCC_OscConfig+0x109a>
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000
 80016b0:	10908120 	.word	0x10908120
 80016b4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b8:	4b8d      	ldr	r3, [pc, #564]	; (80018f0 <HAL_RCC_OscConfig+0xb3c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0e8      	beq.n	8001696 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d106      	bne.n	80016e2 <HAL_RCC_OscConfig+0x92e>
 80016d4:	4b87      	ldr	r3, [pc, #540]	; (80018f4 <HAL_RCC_OscConfig+0xb40>)
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	4a86      	ldr	r2, [pc, #536]	; (80018f4 <HAL_RCC_OscConfig+0xb40>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6213      	str	r3, [r2, #32]
 80016e0:	e035      	b.n	800174e <HAL_RCC_OscConfig+0x99a>
 80016e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0x958>
 80016f2:	4b80      	ldr	r3, [pc, #512]	; (80018f4 <HAL_RCC_OscConfig+0xb40>)
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	4a7f      	ldr	r2, [pc, #508]	; (80018f4 <HAL_RCC_OscConfig+0xb40>)
 80016f8:	f023 0301 	bic.w	r3, r3, #1
 80016fc:	6213      	str	r3, [r2, #32]
 80016fe:	4b7d      	ldr	r3, [pc, #500]	; (80018f4 <HAL_RCC_OscConfig+0xb40>)
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	4a7c      	ldr	r2, [pc, #496]	; (80018f4 <HAL_RCC_OscConfig+0xb40>)
 8001704:	f023 0304 	bic.w	r3, r3, #4
 8001708:	6213      	str	r3, [r2, #32]
 800170a:	e020      	b.n	800174e <HAL_RCC_OscConfig+0x99a>
 800170c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001710:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b05      	cmp	r3, #5
 800171a:	d10c      	bne.n	8001736 <HAL_RCC_OscConfig+0x982>
 800171c:	4b75      	ldr	r3, [pc, #468]	; (80018f4 <HAL_RCC_OscConfig+0xb40>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4a74      	ldr	r2, [pc, #464]	; (80018f4 <HAL_RCC_OscConfig+0xb40>)
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	6213      	str	r3, [r2, #32]
 8001728:	4b72      	ldr	r3, [pc, #456]	; (80018f4 <HAL_RCC_OscConfig+0xb40>)
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4a71      	ldr	r2, [pc, #452]	; (80018f4 <HAL_RCC_OscConfig+0xb40>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6213      	str	r3, [r2, #32]
 8001734:	e00b      	b.n	800174e <HAL_RCC_OscConfig+0x99a>
 8001736:	4b6f      	ldr	r3, [pc, #444]	; (80018f4 <HAL_RCC_OscConfig+0xb40>)
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	4a6e      	ldr	r2, [pc, #440]	; (80018f4 <HAL_RCC_OscConfig+0xb40>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	6213      	str	r3, [r2, #32]
 8001742:	4b6c      	ldr	r3, [pc, #432]	; (80018f4 <HAL_RCC_OscConfig+0xb40>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4a6b      	ldr	r2, [pc, #428]	; (80018f4 <HAL_RCC_OscConfig+0xb40>)
 8001748:	f023 0304 	bic.w	r3, r3, #4
 800174c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800174e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001752:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 8081 	beq.w	8001862 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001760:	f7ff f87c 	bl	800085c <HAL_GetTick>
 8001764:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001768:	e00b      	b.n	8001782 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff f877 	bl	800085c <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	; 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e365      	b.n	8001e4e <HAL_RCC_OscConfig+0x109a>
 8001782:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001786:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800178a:	2202      	movs	r2, #2
 800178c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001792:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	fa93 f2a3 	rbit	r2, r3
 800179c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80017ae:	2202      	movs	r2, #2
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	fa93 f2a3 	rbit	r2, r3
 80017c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017c8:	601a      	str	r2, [r3, #0]
  return result;
 80017ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ce:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d4:	fab3 f383 	clz	r3, r3
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f043 0302 	orr.w	r3, r3, #2
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d102      	bne.n	80017ee <HAL_RCC_OscConfig+0xa3a>
 80017e8:	4b42      	ldr	r3, [pc, #264]	; (80018f4 <HAL_RCC_OscConfig+0xb40>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	e013      	b.n	8001816 <HAL_RCC_OscConfig+0xa62>
 80017ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017f6:	2202      	movs	r2, #2
 80017f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	fa93 f2a3 	rbit	r2, r3
 8001808:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800180c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	4b38      	ldr	r3, [pc, #224]	; (80018f4 <HAL_RCC_OscConfig+0xb40>)
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800181a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800181e:	2102      	movs	r1, #2
 8001820:	6011      	str	r1, [r2, #0]
 8001822:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001826:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	fa92 f1a2 	rbit	r1, r2
 8001830:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001834:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001838:	6011      	str	r1, [r2, #0]
  return result;
 800183a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800183e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	fab2 f282 	clz	r2, r2
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	f002 021f 	and.w	r2, r2, #31
 8001854:	2101      	movs	r1, #1
 8001856:	fa01 f202 	lsl.w	r2, r1, r2
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d084      	beq.n	800176a <HAL_RCC_OscConfig+0x9b6>
 8001860:	e083      	b.n	800196a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001862:	f7fe fffb 	bl	800085c <HAL_GetTick>
 8001866:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186a:	e00b      	b.n	8001884 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800186c:	f7fe fff6 	bl	800085c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	f241 3288 	movw	r2, #5000	; 0x1388
 800187c:	4293      	cmp	r3, r2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e2e4      	b.n	8001e4e <HAL_RCC_OscConfig+0x109a>
 8001884:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001888:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800188c:	2202      	movs	r2, #2
 800188e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001894:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	fa93 f2a3 	rbit	r2, r3
 800189e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018b0:	2202      	movs	r2, #2
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	fa93 f2a3 	rbit	r2, r3
 80018c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018ca:	601a      	str	r2, [r3, #0]
  return result;
 80018cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d6:	fab3 f383 	clz	r3, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	095b      	lsrs	r3, r3, #5
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d106      	bne.n	80018f8 <HAL_RCC_OscConfig+0xb44>
 80018ea:	4b02      	ldr	r3, [pc, #8]	; (80018f4 <HAL_RCC_OscConfig+0xb40>)
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	e017      	b.n	8001920 <HAL_RCC_OscConfig+0xb6c>
 80018f0:	40007000 	.word	0x40007000
 80018f4:	40021000 	.word	0x40021000
 80018f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018fc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001900:	2202      	movs	r2, #2
 8001902:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001904:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001908:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	fa93 f2a3 	rbit	r2, r3
 8001912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001916:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	4bb3      	ldr	r3, [pc, #716]	; (8001bec <HAL_RCC_OscConfig+0xe38>)
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001924:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001928:	2102      	movs	r1, #2
 800192a:	6011      	str	r1, [r2, #0]
 800192c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001930:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	fa92 f1a2 	rbit	r1, r2
 800193a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800193e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001942:	6011      	str	r1, [r2, #0]
  return result;
 8001944:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001948:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	fab2 f282 	clz	r2, r2
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	f002 021f 	and.w	r2, r2, #31
 800195e:	2101      	movs	r1, #1
 8001960:	fa01 f202 	lsl.w	r2, r1, r2
 8001964:	4013      	ands	r3, r2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d180      	bne.n	800186c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800196a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800196e:	2b01      	cmp	r3, #1
 8001970:	d105      	bne.n	800197e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001972:	4b9e      	ldr	r3, [pc, #632]	; (8001bec <HAL_RCC_OscConfig+0xe38>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4a9d      	ldr	r2, [pc, #628]	; (8001bec <HAL_RCC_OscConfig+0xe38>)
 8001978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800197c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800197e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001982:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 825e 	beq.w	8001e4c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001990:	4b96      	ldr	r3, [pc, #600]	; (8001bec <HAL_RCC_OscConfig+0xe38>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	f000 821f 	beq.w	8001ddc <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	f040 8170 	bne.w	8001c90 <HAL_RCC_OscConfig+0xedc>
 80019b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80019b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	fa93 f2a3 	rbit	r2, r3
 80019cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019d4:	601a      	str	r2, [r3, #0]
  return result;
 80019d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019da:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019de:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e0:	fab3 f383 	clz	r3, r3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	461a      	mov	r2, r3
 80019f2:	2300      	movs	r3, #0
 80019f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f6:	f7fe ff31 	bl	800085c <HAL_GetTick>
 80019fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fe:	e009      	b.n	8001a14 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a00:	f7fe ff2c 	bl	800085c <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e21c      	b.n	8001e4e <HAL_RCC_OscConfig+0x109a>
 8001a14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a18:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a26:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	fa93 f2a3 	rbit	r2, r3
 8001a30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a34:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a38:	601a      	str	r2, [r3, #0]
  return result;
 8001a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a42:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a44:	fab3 f383 	clz	r3, r3
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	095b      	lsrs	r3, r3, #5
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d102      	bne.n	8001a5e <HAL_RCC_OscConfig+0xcaa>
 8001a58:	4b64      	ldr	r3, [pc, #400]	; (8001bec <HAL_RCC_OscConfig+0xe38>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	e027      	b.n	8001aae <HAL_RCC_OscConfig+0xcfa>
 8001a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a62:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a70:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	fa93 f2a3 	rbit	r2, r3
 8001a7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a88:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a96:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	fa93 f2a3 	rbit	r2, r3
 8001aa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	4b50      	ldr	r3, [pc, #320]	; (8001bec <HAL_RCC_OscConfig+0xe38>)
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ab2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ab6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001aba:	6011      	str	r1, [r2, #0]
 8001abc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ac0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	fa92 f1a2 	rbit	r1, r2
 8001aca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ace:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001ad2:	6011      	str	r1, [r2, #0]
  return result;
 8001ad4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ad8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	fab2 f282 	clz	r2, r2
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	f042 0220 	orr.w	r2, r2, #32
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	f002 021f 	and.w	r2, r2, #31
 8001aee:	2101      	movs	r1, #1
 8001af0:	fa01 f202 	lsl.w	r2, r1, r2
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d182      	bne.n	8001a00 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001afa:	4b3c      	ldr	r3, [pc, #240]	; (8001bec <HAL_RCC_OscConfig+0xe38>)
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	f023 020f 	bic.w	r2, r3, #15
 8001b02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	4937      	ldr	r1, [pc, #220]	; (8001bec <HAL_RCC_OscConfig+0xe38>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001b14:	4b35      	ldr	r3, [pc, #212]	; (8001bec <HAL_RCC_OscConfig+0xe38>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001b1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6a19      	ldr	r1, [r3, #32]
 8001b28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	430b      	orrs	r3, r1
 8001b36:	492d      	ldr	r1, [pc, #180]	; (8001bec <HAL_RCC_OscConfig+0xe38>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
 8001b3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b40:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b4e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	fa93 f2a3 	rbit	r2, r3
 8001b58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b60:	601a      	str	r2, [r3, #0]
  return result;
 8001b62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b66:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b6a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b6c:	fab3 f383 	clz	r3, r3
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b76:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	2301      	movs	r3, #1
 8001b80:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b82:	f7fe fe6b 	bl	800085c <HAL_GetTick>
 8001b86:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b8a:	e009      	b.n	8001ba0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7fe fe66 	bl	800085c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e156      	b.n	8001e4e <HAL_RCC_OscConfig+0x109a>
 8001ba0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ba8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	fa93 f2a3 	rbit	r2, r3
 8001bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001bc4:	601a      	str	r2, [r3, #0]
  return result;
 8001bc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bca:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001bce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d105      	bne.n	8001bf0 <HAL_RCC_OscConfig+0xe3c>
 8001be4:	4b01      	ldr	r3, [pc, #4]	; (8001bec <HAL_RCC_OscConfig+0xe38>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	e02a      	b.n	8001c40 <HAL_RCC_OscConfig+0xe8c>
 8001bea:	bf00      	nop
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001bf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c02:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	fa93 f2a3 	rbit	r2, r3
 8001c0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c10:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c1a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c28:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	fa93 f2a3 	rbit	r2, r3
 8001c32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c36:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	4b86      	ldr	r3, [pc, #536]	; (8001e58 <HAL_RCC_OscConfig+0x10a4>)
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c44:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c4c:	6011      	str	r1, [r2, #0]
 8001c4e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c52:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	fa92 f1a2 	rbit	r1, r2
 8001c5c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c60:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001c64:	6011      	str	r1, [r2, #0]
  return result;
 8001c66:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c6a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	fab2 f282 	clz	r2, r2
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	f042 0220 	orr.w	r2, r2, #32
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	f002 021f 	and.w	r2, r2, #31
 8001c80:	2101      	movs	r1, #1
 8001c82:	fa01 f202 	lsl.w	r2, r1, r2
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f43f af7f 	beq.w	8001b8c <HAL_RCC_OscConfig+0xdd8>
 8001c8e:	e0dd      	b.n	8001e4c <HAL_RCC_OscConfig+0x1098>
 8001c90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c94:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	fa93 f2a3 	rbit	r2, r3
 8001cac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001cb4:	601a      	str	r2, [r3, #0]
  return result;
 8001cb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cba:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001cbe:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7fe fdc1 	bl	800085c <HAL_GetTick>
 8001cda:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cde:	e009      	b.n	8001cf4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7fe fdbc 	bl	800085c <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e0ac      	b.n	8001e4e <HAL_RCC_OscConfig+0x109a>
 8001cf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d06:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	fa93 f2a3 	rbit	r2, r3
 8001d10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d14:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d18:	601a      	str	r2, [r3, #0]
  return result;
 8001d1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d22:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d24:	fab3 f383 	clz	r3, r3
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d102      	bne.n	8001d3e <HAL_RCC_OscConfig+0xf8a>
 8001d38:	4b47      	ldr	r3, [pc, #284]	; (8001e58 <HAL_RCC_OscConfig+0x10a4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	e027      	b.n	8001d8e <HAL_RCC_OscConfig+0xfda>
 8001d3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d42:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d50:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	fa93 f2a3 	rbit	r2, r3
 8001d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d68:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d76:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	fa93 f2a3 	rbit	r2, r3
 8001d80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d84:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	4b33      	ldr	r3, [pc, #204]	; (8001e58 <HAL_RCC_OscConfig+0x10a4>)
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d92:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d96:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d9a:	6011      	str	r1, [r2, #0]
 8001d9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001da0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	fa92 f1a2 	rbit	r1, r2
 8001daa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dae:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001db2:	6011      	str	r1, [r2, #0]
  return result;
 8001db4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001db8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	fab2 f282 	clz	r2, r2
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	f042 0220 	orr.w	r2, r2, #32
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	f002 021f 	and.w	r2, r2, #31
 8001dce:	2101      	movs	r1, #1
 8001dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d182      	bne.n	8001ce0 <HAL_RCC_OscConfig+0xf2c>
 8001dda:	e037      	b.n	8001e4c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ddc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e02e      	b.n	8001e4e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001df0:	4b19      	ldr	r3, [pc, #100]	; (8001e58 <HAL_RCC_OscConfig+0x10a4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001df8:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <HAL_RCC_OscConfig+0x10a4>)
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e04:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d117      	bne.n	8001e48 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e18:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e1c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d10b      	bne.n	8001e48 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001e30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e34:	f003 020f 	and.w	r2, r3, #15
 8001e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000

08001e5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b09e      	sub	sp, #120	; 0x78
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e162      	b.n	800213a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e74:	4b90      	ldr	r3, [pc, #576]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d910      	bls.n	8001ea4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4b8d      	ldr	r3, [pc, #564]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 0207 	bic.w	r2, r3, #7
 8001e8a:	498b      	ldr	r1, [pc, #556]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b89      	ldr	r3, [pc, #548]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e14a      	b.n	800213a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb0:	4b82      	ldr	r3, [pc, #520]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	497f      	ldr	r1, [pc, #508]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 80dc 	beq.w	8002088 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d13c      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xf6>
 8001ed8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001edc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ee0:	fa93 f3a3 	rbit	r3, r3
 8001ee4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d102      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xa6>
 8001efc:	4b6f      	ldr	r3, [pc, #444]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	e00f      	b.n	8001f22 <HAL_RCC_ClockConfig+0xc6>
 8001f02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	667b      	str	r3, [r7, #100]	; 0x64
 8001f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f14:	663b      	str	r3, [r7, #96]	; 0x60
 8001f16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f1e:	4b67      	ldr	r3, [pc, #412]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f26:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f2a:	fa92 f2a2 	rbit	r2, r2
 8001f2e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f32:	fab2 f282 	clz	r2, r2
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	f042 0220 	orr.w	r2, r2, #32
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	f002 021f 	and.w	r2, r2, #31
 8001f42:	2101      	movs	r1, #1
 8001f44:	fa01 f202 	lsl.w	r2, r1, r2
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d17b      	bne.n	8002046 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e0f3      	b.n	800213a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d13c      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x178>
 8001f5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	095b      	lsrs	r3, r3, #5
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d102      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x128>
 8001f7e:	4b4f      	ldr	r3, [pc, #316]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	e00f      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x148>
 8001f84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f8c:	fa93 f3a3 	rbit	r3, r3
 8001f90:	647b      	str	r3, [r7, #68]	; 0x44
 8001f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f96:	643b      	str	r3, [r7, #64]	; 0x40
 8001f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f9a:	fa93 f3a3 	rbit	r3, r3
 8001f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fa0:	4b46      	ldr	r3, [pc, #280]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fa8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fac:	fa92 f2a2 	rbit	r2, r2
 8001fb0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fb4:	fab2 f282 	clz	r2, r2
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	f042 0220 	orr.w	r2, r2, #32
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	f002 021f 	and.w	r2, r2, #31
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d13a      	bne.n	8002046 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0b2      	b.n	800213a <HAL_RCC_ClockConfig+0x2de>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe2:	fab3 f383 	clz	r3, r3
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	095b      	lsrs	r3, r3, #5
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d102      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x1a0>
 8001ff6:	4b31      	ldr	r3, [pc, #196]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	e00d      	b.n	8002018 <HAL_RCC_ClockConfig+0x1bc>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
 8002008:	2302      	movs	r3, #2
 800200a:	623b      	str	r3, [r7, #32]
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	61fb      	str	r3, [r7, #28]
 8002014:	4b29      	ldr	r3, [pc, #164]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	2202      	movs	r2, #2
 800201a:	61ba      	str	r2, [r7, #24]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	fa92 f2a2 	rbit	r2, r2
 8002022:	617a      	str	r2, [r7, #20]
  return result;
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	fab2 f282 	clz	r2, r2
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	f042 0220 	orr.w	r2, r2, #32
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	f002 021f 	and.w	r2, r2, #31
 8002036:	2101      	movs	r1, #1
 8002038:	fa01 f202 	lsl.w	r2, r1, r2
 800203c:	4013      	ands	r3, r2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e079      	b.n	800213a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f023 0203 	bic.w	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	491a      	ldr	r1, [pc, #104]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002058:	f7fe fc00 	bl	800085c <HAL_GetTick>
 800205c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	e00a      	b.n	8002076 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002060:	f7fe fbfc 	bl	800085c <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	; 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e061      	b.n	800213a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 020c 	and.w	r2, r3, #12
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	429a      	cmp	r2, r3
 8002086:	d1eb      	bne.n	8002060 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d214      	bcs.n	80020c0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 0207 	bic.w	r2, r3, #7
 800209e:	4906      	ldr	r1, [pc, #24]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e040      	b.n	800213a <HAL_RCC_ClockConfig+0x2de>
 80020b8:	40022000 	.word	0x40022000
 80020bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020cc:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HAL_RCC_ClockConfig+0x2e8>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	491a      	ldr	r1, [pc, #104]	; (8002144 <HAL_RCC_ClockConfig+0x2e8>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d009      	beq.n	80020fe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_RCC_ClockConfig+0x2e8>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4912      	ldr	r1, [pc, #72]	; (8002144 <HAL_RCC_ClockConfig+0x2e8>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020fe:	f000 f829 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002102:	4601      	mov	r1, r0
 8002104:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_RCC_ClockConfig+0x2e8>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800210c:	22f0      	movs	r2, #240	; 0xf0
 800210e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	fa92 f2a2 	rbit	r2, r2
 8002116:	60fa      	str	r2, [r7, #12]
  return result;
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	fab2 f282 	clz	r2, r2
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	40d3      	lsrs	r3, r2
 8002122:	4a09      	ldr	r2, [pc, #36]	; (8002148 <HAL_RCC_ClockConfig+0x2ec>)
 8002124:	5cd3      	ldrb	r3, [r2, r3]
 8002126:	fa21 f303 	lsr.w	r3, r1, r3
 800212a:	4a08      	ldr	r2, [pc, #32]	; (800214c <HAL_RCC_ClockConfig+0x2f0>)
 800212c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_RCC_ClockConfig+0x2f4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fb4e 	bl	80007d4 <HAL_InitTick>
  
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3778      	adds	r7, #120	; 0x78
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	0800324c 	.word	0x0800324c
 800214c:	20000000 	.word	0x20000000
 8002150:	20000004 	.word	0x20000004

08002154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800216e:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	2b04      	cmp	r3, #4
 800217c:	d002      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0x30>
 800217e:	2b08      	cmp	r3, #8
 8002180:	d003      	beq.n	800218a <HAL_RCC_GetSysClockFreq+0x36>
 8002182:	e029      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002184:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002186:	613b      	str	r3, [r7, #16]
      break;
 8002188:	e029      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	0c9b      	lsrs	r3, r3, #18
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	4a18      	ldr	r2, [pc, #96]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002194:	5cd3      	ldrb	r3, [r2, r3]
 8002196:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002198:	4b14      	ldr	r3, [pc, #80]	; (80021ec <HAL_RCC_GetSysClockFreq+0x98>)
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	f003 030f 	and.w	r3, r3, #15
 80021a0:	4a15      	ldr	r2, [pc, #84]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021a2:	5cd3      	ldrb	r3, [r2, r3]
 80021a4:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021b0:	4a0f      	ldr	r2, [pc, #60]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	fb02 f303 	mul.w	r3, r2, r3
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	e007      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021c2:	4a0b      	ldr	r2, [pc, #44]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	fb02 f303 	mul.w	r3, r2, r3
 80021d0:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	613b      	str	r3, [r7, #16]
      break;
 80021d6:	e002      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021da:	613b      	str	r3, [r7, #16]
      break;
 80021dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021de:	693b      	ldr	r3, [r7, #16]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	371c      	adds	r7, #28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	40021000 	.word	0x40021000
 80021f0:	007a1200 	.word	0x007a1200
 80021f4:	08003264 	.word	0x08003264
 80021f8:	08003274 	.word	0x08003274

080021fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <HAL_RCC_GetHCLKFreq+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000000 	.word	0x20000000

08002214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800221a:	f7ff ffef 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 800221e:	4601      	mov	r1, r0
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002228:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800222c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	fa92 f2a2 	rbit	r2, r2
 8002234:	603a      	str	r2, [r7, #0]
  return result;
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	fab2 f282 	clz	r2, r2
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	40d3      	lsrs	r3, r2
 8002240:	4a04      	ldr	r2, [pc, #16]	; (8002254 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002242:	5cd3      	ldrb	r3, [r2, r3]
 8002244:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000
 8002254:	0800325c 	.word	0x0800325c

08002258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800225e:	f7ff ffcd 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 8002262:	4601      	mov	r1, r0
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800226c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002270:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	fa92 f2a2 	rbit	r2, r2
 8002278:	603a      	str	r2, [r7, #0]
  return result;
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	fab2 f282 	clz	r2, r2
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	40d3      	lsrs	r3, r2
 8002284:	4a04      	ldr	r2, [pc, #16]	; (8002298 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	0800325c 	.word	0x0800325c

0800229c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b092      	sub	sp, #72	; 0x48
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 80d4 	beq.w	8002468 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c0:	4b4e      	ldr	r3, [pc, #312]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10e      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022cc:	4b4b      	ldr	r3, [pc, #300]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	4a4a      	ldr	r2, [pc, #296]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d6:	61d3      	str	r3, [r2, #28]
 80022d8:	4b48      	ldr	r3, [pc, #288]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e4:	2301      	movs	r3, #1
 80022e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ea:	4b45      	ldr	r3, [pc, #276]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d118      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f6:	4b42      	ldr	r3, [pc, #264]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a41      	ldr	r2, [pc, #260]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002300:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002302:	f7fe faab 	bl	800085c <HAL_GetTick>
 8002306:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002308:	e008      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230a:	f7fe faa7 	bl	800085c <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b64      	cmp	r3, #100	; 0x64
 8002316:	d901      	bls.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e1d6      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	4b38      	ldr	r3, [pc, #224]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002328:	4b34      	ldr	r3, [pc, #208]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002330:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 8084 	beq.w	8002442 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002342:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002344:	429a      	cmp	r2, r3
 8002346:	d07c      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002348:	4b2c      	ldr	r3, [pc, #176]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002350:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002356:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	4b26      	ldr	r3, [pc, #152]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	461a      	mov	r2, r3
 8002372:	2301      	movs	r3, #1
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800237a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	461a      	mov	r2, r3
 8002396:	2300      	movs	r3, #0
 8002398:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800239a:	4a18      	ldr	r2, [pc, #96]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800239e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d04b      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7fe fa57 	bl	800085c <HAL_GetTick>
 80023ae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b0:	e00a      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7fe fa53 	bl	800085c <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e180      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80023c8:	2302      	movs	r3, #2
 80023ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
 80023d4:	2302      	movs	r3, #2
 80023d6:	623b      	str	r3, [r7, #32]
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	61fb      	str	r3, [r7, #28]
  return result;
 80023e0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d108      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80023f6:	4b01      	ldr	r3, [pc, #4]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	e00d      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80023fc:	40021000 	.word	0x40021000
 8002400:	40007000 	.word	0x40007000
 8002404:	10908100 	.word	0x10908100
 8002408:	2302      	movs	r3, #2
 800240a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	4b9a      	ldr	r3, [pc, #616]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	2202      	movs	r2, #2
 800241a:	613a      	str	r2, [r7, #16]
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	fa92 f2a2 	rbit	r2, r2
 8002422:	60fa      	str	r2, [r7, #12]
  return result;
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	fab2 f282 	clz	r2, r2
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	f002 021f 	and.w	r2, r2, #31
 8002436:	2101      	movs	r1, #1
 8002438:	fa01 f202 	lsl.w	r2, r1, r2
 800243c:	4013      	ands	r3, r2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0b7      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002442:	4b8f      	ldr	r3, [pc, #572]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	498c      	ldr	r1, [pc, #560]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002450:	4313      	orrs	r3, r2
 8002452:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002454:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002458:	2b01      	cmp	r3, #1
 800245a:	d105      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245c:	4b88      	ldr	r3, [pc, #544]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	4a87      	ldr	r2, [pc, #540]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002466:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002474:	4b82      	ldr	r3, [pc, #520]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	f023 0203 	bic.w	r2, r3, #3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	497f      	ldr	r1, [pc, #508]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002482:	4313      	orrs	r3, r2
 8002484:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d008      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002492:	4b7b      	ldr	r3, [pc, #492]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	4978      	ldr	r1, [pc, #480]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024b0:	4b73      	ldr	r3, [pc, #460]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	4970      	ldr	r1, [pc, #448]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0320 	and.w	r3, r3, #32
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d008      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024ce:	4b6c      	ldr	r3, [pc, #432]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f023 0210 	bic.w	r2, r3, #16
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4969      	ldr	r1, [pc, #420]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80024ec:	4b64      	ldr	r3, [pc, #400]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f8:	4961      	ldr	r1, [pc, #388]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d008      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800250a:	4b5d      	ldr	r3, [pc, #372]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f023 0220 	bic.w	r2, r3, #32
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	495a      	ldr	r1, [pc, #360]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002518:	4313      	orrs	r3, r2
 800251a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002528:	4b55      	ldr	r3, [pc, #340]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	4952      	ldr	r1, [pc, #328]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002536:	4313      	orrs	r3, r2
 8002538:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d008      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002546:	4b4e      	ldr	r3, [pc, #312]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	494b      	ldr	r1, [pc, #300]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002554:	4313      	orrs	r3, r2
 8002556:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002564:	4b46      	ldr	r3, [pc, #280]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	4943      	ldr	r1, [pc, #268]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002572:	4313      	orrs	r3, r2
 8002574:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002582:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	493c      	ldr	r1, [pc, #240]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025a0:	4b37      	ldr	r3, [pc, #220]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	4934      	ldr	r1, [pc, #208]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d008      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80025be:	4b30      	ldr	r3, [pc, #192]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	492d      	ldr	r1, [pc, #180]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80025dc:	4b28      	ldr	r3, [pc, #160]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e8:	4925      	ldr	r1, [pc, #148]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80025fa:	4b21      	ldr	r3, [pc, #132]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	491e      	ldr	r1, [pc, #120]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002608:	4313      	orrs	r3, r2
 800260a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002624:	4916      	ldr	r1, [pc, #88]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002626:	4313      	orrs	r3, r2
 8002628:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002642:	490f      	ldr	r1, [pc, #60]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002644:	4313      	orrs	r3, r2
 8002646:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002660:	4907      	ldr	r1, [pc, #28]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00c      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002672:	4b03      	ldr	r3, [pc, #12]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	e002      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002686:	4913      	ldr	r1, [pc, #76]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002688:	4313      	orrs	r3, r2
 800268a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002698:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a4:	490b      	ldr	r1, [pc, #44]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d008      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c2:	4904      	ldr	r1, [pc, #16]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3748      	adds	r7, #72	; 0x48
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000

080026d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e040      	b.n	800276c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fd ffac 	bl	8000658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2224      	movs	r2, #36	; 0x24
 8002704:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 fa86 	bl	8002c30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f8af 	bl	8002888 <UART_SetConfig>
 800272a:	4603      	mov	r3, r0
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e01b      	b.n	800276c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002742:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002752:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 fb05 	bl	8002d74 <UART_CheckIdleState>
 800276a:	4603      	mov	r3, r0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af02      	add	r7, sp, #8
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	4613      	mov	r3, r2
 8002782:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002788:	2b20      	cmp	r3, #32
 800278a:	d178      	bne.n	800287e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <HAL_UART_Transmit+0x24>
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e071      	b.n	8002880 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2221      	movs	r2, #33	; 0x21
 80027a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027aa:	f7fe f857 	bl	800085c <HAL_GetTick>
 80027ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	88fa      	ldrh	r2, [r7, #6]
 80027b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	88fa      	ldrh	r2, [r7, #6]
 80027bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c8:	d108      	bne.n	80027dc <HAL_UART_Transmit+0x68>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d104      	bne.n	80027dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	e003      	b.n	80027e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027e4:	e030      	b.n	8002848 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2200      	movs	r2, #0
 80027ee:	2180      	movs	r1, #128	; 0x80
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 fb67 	bl	8002ec4 <UART_WaitOnFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d004      	beq.n	8002806 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2220      	movs	r2, #32
 8002800:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e03c      	b.n	8002880 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10b      	bne.n	8002824 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	881a      	ldrh	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002818:	b292      	uxth	r2, r2
 800281a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	3302      	adds	r3, #2
 8002820:	61bb      	str	r3, [r7, #24]
 8002822:	e008      	b.n	8002836 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	781a      	ldrb	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	b292      	uxth	r2, r2
 800282e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	3301      	adds	r3, #1
 8002834:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1c8      	bne.n	80027e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	2200      	movs	r2, #0
 800285c:	2140      	movs	r1, #64	; 0x40
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 fb30 	bl	8002ec4 <UART_WaitOnFlagUntilTimeout>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d004      	beq.n	8002874 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2220      	movs	r2, #32
 800286e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e005      	b.n	8002880 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e000      	b.n	8002880 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800287e:	2302      	movs	r3, #2
  }
}
 8002880:	4618      	mov	r0, r3
 8002882:	3720      	adds	r7, #32
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	4b92      	ldr	r3, [pc, #584]	; (8002afc <UART_SetConfig+0x274>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	6979      	ldr	r1, [r7, #20]
 80028bc:	430b      	orrs	r3, r1
 80028be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a80      	ldr	r2, [pc, #512]	; (8002b00 <UART_SetConfig+0x278>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d120      	bne.n	8002946 <UART_SetConfig+0xbe>
 8002904:	4b7f      	ldr	r3, [pc, #508]	; (8002b04 <UART_SetConfig+0x27c>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	2b03      	cmp	r3, #3
 800290e:	d817      	bhi.n	8002940 <UART_SetConfig+0xb8>
 8002910:	a201      	add	r2, pc, #4	; (adr r2, 8002918 <UART_SetConfig+0x90>)
 8002912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002916:	bf00      	nop
 8002918:	08002929 	.word	0x08002929
 800291c:	08002935 	.word	0x08002935
 8002920:	0800293b 	.word	0x0800293b
 8002924:	0800292f 	.word	0x0800292f
 8002928:	2301      	movs	r3, #1
 800292a:	77fb      	strb	r3, [r7, #31]
 800292c:	e0b5      	b.n	8002a9a <UART_SetConfig+0x212>
 800292e:	2302      	movs	r3, #2
 8002930:	77fb      	strb	r3, [r7, #31]
 8002932:	e0b2      	b.n	8002a9a <UART_SetConfig+0x212>
 8002934:	2304      	movs	r3, #4
 8002936:	77fb      	strb	r3, [r7, #31]
 8002938:	e0af      	b.n	8002a9a <UART_SetConfig+0x212>
 800293a:	2308      	movs	r3, #8
 800293c:	77fb      	strb	r3, [r7, #31]
 800293e:	e0ac      	b.n	8002a9a <UART_SetConfig+0x212>
 8002940:	2310      	movs	r3, #16
 8002942:	77fb      	strb	r3, [r7, #31]
 8002944:	e0a9      	b.n	8002a9a <UART_SetConfig+0x212>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a6f      	ldr	r2, [pc, #444]	; (8002b08 <UART_SetConfig+0x280>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d124      	bne.n	800299a <UART_SetConfig+0x112>
 8002950:	4b6c      	ldr	r3, [pc, #432]	; (8002b04 <UART_SetConfig+0x27c>)
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002958:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800295c:	d011      	beq.n	8002982 <UART_SetConfig+0xfa>
 800295e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002962:	d817      	bhi.n	8002994 <UART_SetConfig+0x10c>
 8002964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002968:	d011      	beq.n	800298e <UART_SetConfig+0x106>
 800296a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800296e:	d811      	bhi.n	8002994 <UART_SetConfig+0x10c>
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <UART_SetConfig+0xf4>
 8002974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002978:	d006      	beq.n	8002988 <UART_SetConfig+0x100>
 800297a:	e00b      	b.n	8002994 <UART_SetConfig+0x10c>
 800297c:	2300      	movs	r3, #0
 800297e:	77fb      	strb	r3, [r7, #31]
 8002980:	e08b      	b.n	8002a9a <UART_SetConfig+0x212>
 8002982:	2302      	movs	r3, #2
 8002984:	77fb      	strb	r3, [r7, #31]
 8002986:	e088      	b.n	8002a9a <UART_SetConfig+0x212>
 8002988:	2304      	movs	r3, #4
 800298a:	77fb      	strb	r3, [r7, #31]
 800298c:	e085      	b.n	8002a9a <UART_SetConfig+0x212>
 800298e:	2308      	movs	r3, #8
 8002990:	77fb      	strb	r3, [r7, #31]
 8002992:	e082      	b.n	8002a9a <UART_SetConfig+0x212>
 8002994:	2310      	movs	r3, #16
 8002996:	77fb      	strb	r3, [r7, #31]
 8002998:	e07f      	b.n	8002a9a <UART_SetConfig+0x212>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a5b      	ldr	r2, [pc, #364]	; (8002b0c <UART_SetConfig+0x284>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d124      	bne.n	80029ee <UART_SetConfig+0x166>
 80029a4:	4b57      	ldr	r3, [pc, #348]	; (8002b04 <UART_SetConfig+0x27c>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80029ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029b0:	d011      	beq.n	80029d6 <UART_SetConfig+0x14e>
 80029b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029b6:	d817      	bhi.n	80029e8 <UART_SetConfig+0x160>
 80029b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029bc:	d011      	beq.n	80029e2 <UART_SetConfig+0x15a>
 80029be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029c2:	d811      	bhi.n	80029e8 <UART_SetConfig+0x160>
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <UART_SetConfig+0x148>
 80029c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029cc:	d006      	beq.n	80029dc <UART_SetConfig+0x154>
 80029ce:	e00b      	b.n	80029e8 <UART_SetConfig+0x160>
 80029d0:	2300      	movs	r3, #0
 80029d2:	77fb      	strb	r3, [r7, #31]
 80029d4:	e061      	b.n	8002a9a <UART_SetConfig+0x212>
 80029d6:	2302      	movs	r3, #2
 80029d8:	77fb      	strb	r3, [r7, #31]
 80029da:	e05e      	b.n	8002a9a <UART_SetConfig+0x212>
 80029dc:	2304      	movs	r3, #4
 80029de:	77fb      	strb	r3, [r7, #31]
 80029e0:	e05b      	b.n	8002a9a <UART_SetConfig+0x212>
 80029e2:	2308      	movs	r3, #8
 80029e4:	77fb      	strb	r3, [r7, #31]
 80029e6:	e058      	b.n	8002a9a <UART_SetConfig+0x212>
 80029e8:	2310      	movs	r3, #16
 80029ea:	77fb      	strb	r3, [r7, #31]
 80029ec:	e055      	b.n	8002a9a <UART_SetConfig+0x212>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a47      	ldr	r2, [pc, #284]	; (8002b10 <UART_SetConfig+0x288>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d124      	bne.n	8002a42 <UART_SetConfig+0x1ba>
 80029f8:	4b42      	ldr	r3, [pc, #264]	; (8002b04 <UART_SetConfig+0x27c>)
 80029fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a04:	d011      	beq.n	8002a2a <UART_SetConfig+0x1a2>
 8002a06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a0a:	d817      	bhi.n	8002a3c <UART_SetConfig+0x1b4>
 8002a0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a10:	d011      	beq.n	8002a36 <UART_SetConfig+0x1ae>
 8002a12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a16:	d811      	bhi.n	8002a3c <UART_SetConfig+0x1b4>
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <UART_SetConfig+0x19c>
 8002a1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a20:	d006      	beq.n	8002a30 <UART_SetConfig+0x1a8>
 8002a22:	e00b      	b.n	8002a3c <UART_SetConfig+0x1b4>
 8002a24:	2300      	movs	r3, #0
 8002a26:	77fb      	strb	r3, [r7, #31]
 8002a28:	e037      	b.n	8002a9a <UART_SetConfig+0x212>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	77fb      	strb	r3, [r7, #31]
 8002a2e:	e034      	b.n	8002a9a <UART_SetConfig+0x212>
 8002a30:	2304      	movs	r3, #4
 8002a32:	77fb      	strb	r3, [r7, #31]
 8002a34:	e031      	b.n	8002a9a <UART_SetConfig+0x212>
 8002a36:	2308      	movs	r3, #8
 8002a38:	77fb      	strb	r3, [r7, #31]
 8002a3a:	e02e      	b.n	8002a9a <UART_SetConfig+0x212>
 8002a3c:	2310      	movs	r3, #16
 8002a3e:	77fb      	strb	r3, [r7, #31]
 8002a40:	e02b      	b.n	8002a9a <UART_SetConfig+0x212>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a33      	ldr	r2, [pc, #204]	; (8002b14 <UART_SetConfig+0x28c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d124      	bne.n	8002a96 <UART_SetConfig+0x20e>
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <UART_SetConfig+0x27c>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002a54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a58:	d011      	beq.n	8002a7e <UART_SetConfig+0x1f6>
 8002a5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a5e:	d817      	bhi.n	8002a90 <UART_SetConfig+0x208>
 8002a60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a64:	d011      	beq.n	8002a8a <UART_SetConfig+0x202>
 8002a66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a6a:	d811      	bhi.n	8002a90 <UART_SetConfig+0x208>
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <UART_SetConfig+0x1f0>
 8002a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a74:	d006      	beq.n	8002a84 <UART_SetConfig+0x1fc>
 8002a76:	e00b      	b.n	8002a90 <UART_SetConfig+0x208>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	77fb      	strb	r3, [r7, #31]
 8002a7c:	e00d      	b.n	8002a9a <UART_SetConfig+0x212>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	77fb      	strb	r3, [r7, #31]
 8002a82:	e00a      	b.n	8002a9a <UART_SetConfig+0x212>
 8002a84:	2304      	movs	r3, #4
 8002a86:	77fb      	strb	r3, [r7, #31]
 8002a88:	e007      	b.n	8002a9a <UART_SetConfig+0x212>
 8002a8a:	2308      	movs	r3, #8
 8002a8c:	77fb      	strb	r3, [r7, #31]
 8002a8e:	e004      	b.n	8002a9a <UART_SetConfig+0x212>
 8002a90:	2310      	movs	r3, #16
 8002a92:	77fb      	strb	r3, [r7, #31]
 8002a94:	e001      	b.n	8002a9a <UART_SetConfig+0x212>
 8002a96:	2310      	movs	r3, #16
 8002a98:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa2:	d16b      	bne.n	8002b7c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002aa4:	7ffb      	ldrb	r3, [r7, #31]
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d838      	bhi.n	8002b1c <UART_SetConfig+0x294>
 8002aaa:	a201      	add	r2, pc, #4	; (adr r2, 8002ab0 <UART_SetConfig+0x228>)
 8002aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab0:	08002ad5 	.word	0x08002ad5
 8002ab4:	08002add 	.word	0x08002add
 8002ab8:	08002ae5 	.word	0x08002ae5
 8002abc:	08002b1d 	.word	0x08002b1d
 8002ac0:	08002aeb 	.word	0x08002aeb
 8002ac4:	08002b1d 	.word	0x08002b1d
 8002ac8:	08002b1d 	.word	0x08002b1d
 8002acc:	08002b1d 	.word	0x08002b1d
 8002ad0:	08002af3 	.word	0x08002af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ad4:	f7ff fb9e 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 8002ad8:	61b8      	str	r0, [r7, #24]
        break;
 8002ada:	e024      	b.n	8002b26 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002adc:	f7ff fbbc 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 8002ae0:	61b8      	str	r0, [r7, #24]
        break;
 8002ae2:	e020      	b.n	8002b26 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <UART_SetConfig+0x290>)
 8002ae6:	61bb      	str	r3, [r7, #24]
        break;
 8002ae8:	e01d      	b.n	8002b26 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aea:	f7ff fb33 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002aee:	61b8      	str	r0, [r7, #24]
        break;
 8002af0:	e019      	b.n	8002b26 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002af6:	61bb      	str	r3, [r7, #24]
        break;
 8002af8:	e015      	b.n	8002b26 <UART_SetConfig+0x29e>
 8002afa:	bf00      	nop
 8002afc:	efff69f3 	.word	0xefff69f3
 8002b00:	40013800 	.word	0x40013800
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40004400 	.word	0x40004400
 8002b0c:	40004800 	.word	0x40004800
 8002b10:	40004c00 	.word	0x40004c00
 8002b14:	40005000 	.word	0x40005000
 8002b18:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	77bb      	strb	r3, [r7, #30]
        break;
 8002b24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d073      	beq.n	8002c14 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	005a      	lsls	r2, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	085b      	lsrs	r3, r3, #1
 8002b36:	441a      	add	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	2b0f      	cmp	r3, #15
 8002b46:	d916      	bls.n	8002b76 <UART_SetConfig+0x2ee>
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b4e:	d212      	bcs.n	8002b76 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	f023 030f 	bic.w	r3, r3, #15
 8002b58:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	085b      	lsrs	r3, r3, #1
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	89fb      	ldrh	r3, [r7, #14]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	89fa      	ldrh	r2, [r7, #14]
 8002b72:	60da      	str	r2, [r3, #12]
 8002b74:	e04e      	b.n	8002c14 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	77bb      	strb	r3, [r7, #30]
 8002b7a:	e04b      	b.n	8002c14 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b7c:	7ffb      	ldrb	r3, [r7, #31]
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d827      	bhi.n	8002bd2 <UART_SetConfig+0x34a>
 8002b82:	a201      	add	r2, pc, #4	; (adr r2, 8002b88 <UART_SetConfig+0x300>)
 8002b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b88:	08002bad 	.word	0x08002bad
 8002b8c:	08002bb5 	.word	0x08002bb5
 8002b90:	08002bbd 	.word	0x08002bbd
 8002b94:	08002bd3 	.word	0x08002bd3
 8002b98:	08002bc3 	.word	0x08002bc3
 8002b9c:	08002bd3 	.word	0x08002bd3
 8002ba0:	08002bd3 	.word	0x08002bd3
 8002ba4:	08002bd3 	.word	0x08002bd3
 8002ba8:	08002bcb 	.word	0x08002bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bac:	f7ff fb32 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 8002bb0:	61b8      	str	r0, [r7, #24]
        break;
 8002bb2:	e013      	b.n	8002bdc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bb4:	f7ff fb50 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 8002bb8:	61b8      	str	r0, [r7, #24]
        break;
 8002bba:	e00f      	b.n	8002bdc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <UART_SetConfig+0x3a4>)
 8002bbe:	61bb      	str	r3, [r7, #24]
        break;
 8002bc0:	e00c      	b.n	8002bdc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bc2:	f7ff fac7 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002bc6:	61b8      	str	r0, [r7, #24]
        break;
 8002bc8:	e008      	b.n	8002bdc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bce:	61bb      	str	r3, [r7, #24]
        break;
 8002bd0:	e004      	b.n	8002bdc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	77bb      	strb	r3, [r7, #30]
        break;
 8002bda:	bf00      	nop
    }

    if (pclk != 0U)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d018      	beq.n	8002c14 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	085a      	lsrs	r2, r3, #1
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	441a      	add	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	2b0f      	cmp	r3, #15
 8002bfa:	d909      	bls.n	8002c10 <UART_SetConfig+0x388>
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c02:	d205      	bcs.n	8002c10 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	e001      	b.n	8002c14 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002c20:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3720      	adds	r7, #32
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	007a1200 	.word	0x007a1200

08002c30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00a      	beq.n	8002c9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00a      	beq.n	8002ce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d01a      	beq.n	8002d46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d2e:	d10a      	bne.n	8002d46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	605a      	str	r2, [r3, #4]
  }
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b098      	sub	sp, #96	; 0x60
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d84:	f7fd fd6a 	bl	800085c <HAL_GetTick>
 8002d88:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d12e      	bne.n	8002df6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da0:	2200      	movs	r2, #0
 8002da2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f88c 	bl	8002ec4 <UART_WaitOnFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d021      	beq.n	8002df6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dba:	e853 3f00 	ldrex	r3, [r3]
 8002dbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dc6:	653b      	str	r3, [r7, #80]	; 0x50
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8002dd2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002dd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dd8:	e841 2300 	strex	r3, r2, [r1]
 8002ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1e6      	bne.n	8002db2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e062      	b.n	8002ebc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d149      	bne.n	8002e98 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f856 	bl	8002ec4 <UART_WaitOnFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d03c      	beq.n	8002e98 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	e853 3f00 	ldrex	r3, [r3]
 8002e2a:	623b      	str	r3, [r7, #32]
   return(result);
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e3c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e44:	e841 2300 	strex	r3, r2, [r1]
 8002e48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1e6      	bne.n	8002e1e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3308      	adds	r3, #8
 8002e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	e853 3f00 	ldrex	r3, [r3]
 8002e5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3308      	adds	r3, #8
 8002e6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e70:	61fa      	str	r2, [r7, #28]
 8002e72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e74:	69b9      	ldr	r1, [r7, #24]
 8002e76:	69fa      	ldr	r2, [r7, #28]
 8002e78:	e841 2300 	strex	r3, r2, [r1]
 8002e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1e5      	bne.n	8002e50 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e011      	b.n	8002ebc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3758      	adds	r7, #88	; 0x58
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed4:	e04f      	b.n	8002f76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d04b      	beq.n	8002f76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ede:	f7fd fcbd 	bl	800085c <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d302      	bcc.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e04e      	b.n	8002f96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d037      	beq.n	8002f76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b80      	cmp	r3, #128	; 0x80
 8002f0a:	d034      	beq.n	8002f76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b40      	cmp	r3, #64	; 0x40
 8002f10:	d031      	beq.n	8002f76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d110      	bne.n	8002f42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2208      	movs	r2, #8
 8002f26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f838 	bl	8002f9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2208      	movs	r2, #8
 8002f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e029      	b.n	8002f96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f50:	d111      	bne.n	8002f76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 f81e 	bl	8002f9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e00f      	b.n	8002f96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69da      	ldr	r2, [r3, #28]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	bf0c      	ite	eq
 8002f86:	2301      	moveq	r3, #1
 8002f88:	2300      	movne	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d0a0      	beq.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b095      	sub	sp, #84	; 0x54
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fae:	e853 3f00 	ldrex	r3, [r3]
 8002fb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc4:	643b      	str	r3, [r7, #64]	; 0x40
 8002fc6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fcc:	e841 2300 	strex	r3, r2, [r1]
 8002fd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1e6      	bne.n	8002fa6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3308      	adds	r3, #8
 8002fde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	e853 3f00 	ldrex	r3, [r3]
 8002fe6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f023 0301 	bic.w	r3, r3, #1
 8002fee:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3308      	adds	r3, #8
 8002ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ff8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003000:	e841 2300 	strex	r3, r2, [r1]
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1e5      	bne.n	8002fd8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003010:	2b01      	cmp	r3, #1
 8003012:	d118      	bne.n	8003046 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	e853 3f00 	ldrex	r3, [r3]
 8003020:	60bb      	str	r3, [r7, #8]
   return(result);
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f023 0310 	bic.w	r3, r3, #16
 8003028:	647b      	str	r3, [r7, #68]	; 0x44
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003032:	61bb      	str	r3, [r7, #24]
 8003034:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003036:	6979      	ldr	r1, [r7, #20]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	e841 2300 	strex	r3, r2, [r1]
 800303e:	613b      	str	r3, [r7, #16]
   return(result);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1e6      	bne.n	8003014 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2220      	movs	r2, #32
 800304a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	669a      	str	r2, [r3, #104]	; 0x68
}
 800305a:	bf00      	nop
 800305c:	3754      	adds	r7, #84	; 0x54
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <memset>:
 8003066:	4402      	add	r2, r0
 8003068:	4603      	mov	r3, r0
 800306a:	4293      	cmp	r3, r2
 800306c:	d100      	bne.n	8003070 <memset+0xa>
 800306e:	4770      	bx	lr
 8003070:	f803 1b01 	strb.w	r1, [r3], #1
 8003074:	e7f9      	b.n	800306a <memset+0x4>
	...

08003078 <__libc_init_array>:
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	4d0d      	ldr	r5, [pc, #52]	; (80030b0 <__libc_init_array+0x38>)
 800307c:	4c0d      	ldr	r4, [pc, #52]	; (80030b4 <__libc_init_array+0x3c>)
 800307e:	1b64      	subs	r4, r4, r5
 8003080:	10a4      	asrs	r4, r4, #2
 8003082:	2600      	movs	r6, #0
 8003084:	42a6      	cmp	r6, r4
 8003086:	d109      	bne.n	800309c <__libc_init_array+0x24>
 8003088:	4d0b      	ldr	r5, [pc, #44]	; (80030b8 <__libc_init_array+0x40>)
 800308a:	4c0c      	ldr	r4, [pc, #48]	; (80030bc <__libc_init_array+0x44>)
 800308c:	f000 f818 	bl	80030c0 <_init>
 8003090:	1b64      	subs	r4, r4, r5
 8003092:	10a4      	asrs	r4, r4, #2
 8003094:	2600      	movs	r6, #0
 8003096:	42a6      	cmp	r6, r4
 8003098:	d105      	bne.n	80030a6 <__libc_init_array+0x2e>
 800309a:	bd70      	pop	{r4, r5, r6, pc}
 800309c:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a0:	4798      	blx	r3
 80030a2:	3601      	adds	r6, #1
 80030a4:	e7ee      	b.n	8003084 <__libc_init_array+0xc>
 80030a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030aa:	4798      	blx	r3
 80030ac:	3601      	adds	r6, #1
 80030ae:	e7f2      	b.n	8003096 <__libc_init_array+0x1e>
 80030b0:	08003284 	.word	0x08003284
 80030b4:	08003284 	.word	0x08003284
 80030b8:	08003284 	.word	0x08003284
 80030bc:	08003288 	.word	0x08003288

080030c0 <_init>:
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c2:	bf00      	nop
 80030c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c6:	bc08      	pop	{r3}
 80030c8:	469e      	mov	lr, r3
 80030ca:	4770      	bx	lr

080030cc <_fini>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	bf00      	nop
 80030d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d2:	bc08      	pop	{r3}
 80030d4:	469e      	mov	lr, r3
 80030d6:	4770      	bx	lr
